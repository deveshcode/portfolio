{"status":"ok","feed":{"url":"https://medium.com/feed/@deveshsurve","title":"Stories by Devesh Surve on Medium","link":"https://medium.com/@deveshsurve?source=rss-eceecdcfa17e------2","author":"","description":"Stories by Devesh Surve on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*3wAozmLhpS3Nuzn86fdMtw.jpeg"},"items":[{"title":"Deep Blue AI\u00a0: In 3 Minutes","pubDate":"2022-10-20 15:32:08","link":"https://deveshsurve.medium.com/deep-blue-ai-in-3-minutes-304319d31fab?source=rss-eceecdcfa17e------2","guid":"https://medium.com/p/304319d31fab","author":"Devesh Surve","thumbnail":"https://cdn-images-1.medium.com/max/1024/0*q3OZaN_cg2Kq36Mt","description":"\n<h3>Deep Blue AI\u00a0: In 3\u00a0Minutes</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*q3OZaN_cg2Kq36Mt\"></figure><h3><strong>So what exactly was Deep Blue\u00a0?</strong></h3>\n<p>Deep Blue was a chess-playing computer developed by IBM. It is known for being the first computer chess-playing system to win both a chess game and a chess match against a reigning world champion under regular time controls.</p>\n<p>Deep Blue won its first game against a world champion on 10 February 1996, when it defeated Garry Kasparov in game one of a six-game match. However, Kasparov won three and drew two of the following five games, defeating Deep Blue by a score of 4\u20132. Deep Blue was then heavily upgraded, and played Kasparov again in May 1997.Deep Blue won game six, therefore winning the six-game rematch 3\u00bd\u20132\u00bd and becoming the first computer system to defeat a reigning world champion in a match under standard chess tournament time controls\u00a0!</p>\n<p>Kasparov accused IBM of cheating and demanded a rematch. But IBM refused and retired Deep\u00a0Blue.</p>\n<h3><strong>Interesting, So How did it work\u00a0?</strong></h3>\n<h4>A bit technical, but bear with me\u00a0:)</h4>\n<p>As put forth in Shannon\u2019s paper, the primary ingredient in a chess-playing program is the evaluation function. Since we can\u2019t look forward all the way to the end of the game and see if a particular move will win (especially since we don\u2019t know what the other player will do during their turns!), we must create a function which takes in a state of the game (in our case, a board arrangement) and boils it down to a real-number evaluation of the\u00a0state.</p>\n<p>For example, imagine the function to be a judge in reality show which gives points to every contestant. the function could give higher scores to board states in which the player of interest has more of their pieces on the board than the opponent. In particular, we would probably want the function to assign an extremely high score (perhaps even infinity\u00a0!) to the board arrangement in which the opponent\u2019s king is in checkmate, meaning that the player of interest is guaranteed to win the\u00a0game.</p>\n<p>Something which would visually look like\u00a0this</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Wt9LtfdqutpkkiPO.png\"></figure><h3><strong>Conclusion\u00a0:</strong></h3>\n<p>As Steve Jobs said, \u201c\u201cYou can\u2019t connect the dots looking forward; <strong>you can only connect them looking backwards</strong>. So you have to trust that the dots will somehow connect in your\u00a0future.\u201d</p>\n<p>Deep Blue had an impact on computing in many different industries. It was programmed to solve the complex, strategic game of chess, so it enabled researchers to explore and understand the limits of massively parallel processing. This research gave developers insight into ways they could design a computer to tackle complex problems in other fields, using deep knowledge to analyze a higher number of possible solutions.</p>\n<p>The architecture used in Deep Blue was applied to financial modeling, including marketplace trends and risk analysis; data mining\u200a\u2014\u200auncovering hidden relationships and patterns in large databases; and molecular dynamics, a valuable tool for helping to discover and develop new\u00a0drugs.</p>\n<p>Ultimately, Deep Blue was retired to the Smithsonian Museum in Washington, DC, but IBM went on to build new kinds of massively parallel computers such as IBM Blue Gene and\u00a0Watson.</p>\n<p>One thing in particular we learned is that there\u2019s more than one way to look at a complex problem. For example, in chess there\u2019s the human way, which is very pattern recognition\u2013based and intuition-based, and then there\u2019s the machine way, which is very search intensive and looks through millions or billions of possibilities. Often these approaches are complementary.</p>\n<p>That\u2019s definitely true in chess but also in many real-world problems\u200a\u2014\u200athat computers and humans together are better than either one\u00a0alone.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=304319d31fab\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Deep Blue AI\u00a0: In 3\u00a0Minutes</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*q3OZaN_cg2Kq36Mt\"></figure><h3><strong>So what exactly was Deep Blue\u00a0?</strong></h3>\n<p>Deep Blue was a chess-playing computer developed by IBM. It is known for being the first computer chess-playing system to win both a chess game and a chess match against a reigning world champion under regular time controls.</p>\n<p>Deep Blue won its first game against a world champion on 10 February 1996, when it defeated Garry Kasparov in game one of a six-game match. However, Kasparov won three and drew two of the following five games, defeating Deep Blue by a score of 4\u20132. Deep Blue was then heavily upgraded, and played Kasparov again in May 1997.Deep Blue won game six, therefore winning the six-game rematch 3\u00bd\u20132\u00bd and becoming the first computer system to defeat a reigning world champion in a match under standard chess tournament time controls\u00a0!</p>\n<p>Kasparov accused IBM of cheating and demanded a rematch. But IBM refused and retired Deep\u00a0Blue.</p>\n<h3><strong>Interesting, So How did it work\u00a0?</strong></h3>\n<h4>A bit technical, but bear with me\u00a0:)</h4>\n<p>As put forth in Shannon\u2019s paper, the primary ingredient in a chess-playing program is the evaluation function. Since we can\u2019t look forward all the way to the end of the game and see if a particular move will win (especially since we don\u2019t know what the other player will do during their turns!), we must create a function which takes in a state of the game (in our case, a board arrangement) and boils it down to a real-number evaluation of the\u00a0state.</p>\n<p>For example, imagine the function to be a judge in reality show which gives points to every contestant. the function could give higher scores to board states in which the player of interest has more of their pieces on the board than the opponent. In particular, we would probably want the function to assign an extremely high score (perhaps even infinity\u00a0!) to the board arrangement in which the opponent\u2019s king is in checkmate, meaning that the player of interest is guaranteed to win the\u00a0game.</p>\n<p>Something which would visually look like\u00a0this</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Wt9LtfdqutpkkiPO.png\"></figure><h3><strong>Conclusion\u00a0:</strong></h3>\n<p>As Steve Jobs said, \u201c\u201cYou can\u2019t connect the dots looking forward; <strong>you can only connect them looking backwards</strong>. So you have to trust that the dots will somehow connect in your\u00a0future.\u201d</p>\n<p>Deep Blue had an impact on computing in many different industries. It was programmed to solve the complex, strategic game of chess, so it enabled researchers to explore and understand the limits of massively parallel processing. This research gave developers insight into ways they could design a computer to tackle complex problems in other fields, using deep knowledge to analyze a higher number of possible solutions.</p>\n<p>The architecture used in Deep Blue was applied to financial modeling, including marketplace trends and risk analysis; data mining\u200a\u2014\u200auncovering hidden relationships and patterns in large databases; and molecular dynamics, a valuable tool for helping to discover and develop new\u00a0drugs.</p>\n<p>Ultimately, Deep Blue was retired to the Smithsonian Museum in Washington, DC, but IBM went on to build new kinds of massively parallel computers such as IBM Blue Gene and\u00a0Watson.</p>\n<p>One thing in particular we learned is that there\u2019s more than one way to look at a complex problem. For example, in chess there\u2019s the human way, which is very pattern recognition\u2013based and intuition-based, and then there\u2019s the machine way, which is very search intensive and looks through millions or billions of possibilities. Often these approaches are complementary.</p>\n<p>That\u2019s definitely true in chess but also in many real-world problems\u200a\u2014\u200athat computers and humans together are better than either one\u00a0alone.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=304319d31fab\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["deep-learning","machine-learning","chess","artificial-intelligence","ai"]},{"title":"Fixed Mindset vs Growth Mindset\u00a0: Learn how your thoughts impact your performance.","pubDate":"2022-10-14 20:45:19","link":"https://deveshsurve.medium.com/fixed-mindset-vs-growth-mindset-learn-how-your-thoughts-impact-your-performance-d0d5e4e8102b?source=rss-eceecdcfa17e------2","guid":"https://medium.com/p/d0d5e4e8102b","author":"Devesh Surve","thumbnail":"https://cdn-images-1.medium.com/max/1024/0*ghhNc8gibB-4f9xg","description":"\n<h3>Fixed Mindset vs Growth Mindset\u00a0: Learn how your thoughts impact your performance.</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ghhNc8gibB-4f9xg\"></figure><p>So let\u2019s Ask &amp; Answer a series of questions to understand what sort of impact a mindset makes on our lives. Can our beliefs about who we are and what we are capable of influencing how we\u00a0live?</p>\n<p>Absolutely.</p>\n<p>The way we perceive our intelligence and abilities has an impact on how we feel, but it may also have an impact on our performance, our ability to form new habits, and our ability to learn new\u00a0skills.</p>\n<p>If you have a growth mindset, you think you can improve your skills and intellect through time. If you have a fixed mindset, you will think that your IQ is fixed and that you will never be good at anything.</p>\n<h3><strong>But why should I believe you\u00a0?</strong></h3>\n<p>Exactly, you shouldn\u2019t. So here, Dr. Carol Dweck, researcher at Stanford University. In Mindset: The New Psychology of Success, Dr. Dweck\u00a0writes:</p>\n<blockquote>What are the consequences of thinking that your intelligence or personality is something you can develop, as opposed to something that is a fixed, deep-seated trait?</blockquote>\n<p>Your view of yourself can determine everything. If you believe that your qualities are unchangeable\u200a\u2014\u200athe fixed mindset\u200a\u2014\u200ayou will want to prove yourself correct over and over rather than learning from your mistakes.</p>\n<p>Dweck writes:</p>\n<blockquote>If you have only a certain amount of intelligence, a certain personality, and a certain moral character\u200a\u2014\u200awell, then you\u2019d better prove that you have a healthy dose of them. It simply wouldn\u2019t do to look or feel deficient in these most basic characteristics.</blockquote>\n<blockquote>[..]</blockquote>\n<blockquote>I\u2019ve seen so many people with this one consuming goal of proving themselves\u200a\u2014\u200ain the classroom, in their careers, and in their relationships. Every situation calls for a confirmation of their intelligence, personality, or character. Every situation is evaluated: Will I succeed or fail? Will I look smart or dumb? Will I be accepted or rejected? Will I feel like a winner or a\u00a0loser?</blockquote>\n<p>These things are culturally desirable. We value intelligence, personality, and character. It\u2019s normal to want this. But\u00a0\u2026</p>\n<blockquote>There\u2019s another mindset in which these traits are not simply a hand you\u2019re dealt and have to live with, always trying to convince yourself and others that you have a royal flush when you\u2019re secretly worried it\u2019s a pair of tens. In this mindset, the hand you\u2019re dealt is just the starting point for development. This growth mindset is based on the belief that your basic qualities are things you can cultivate through your\u00a0efforts.</blockquote>\n<p>A strong effect can result from altering our beliefs. A strong love for learning is sparked by the growth mentality. Dweck asks, \u201cWhy waste time showing how great you are when you might be getting\u00a0better?\u201d</p>\n<blockquote>Why hide deficiencies instead of overcoming them? Why look for friends or partners who will just shore up your self-esteem instead of ones who will also challenge you to grow? And why seek out the tried and true, instead of experiences that will stretch you? <strong>The passion for stretching yourself and sticking to it, even (or especially) when it\u2019s not going well, is the hallmark of the growth mindset</strong>. This is the mindset that allows people to thrive during some of the most challenging times in their\u00a0lives.</blockquote>\n<h3><strong>Okay I get it. But this is all in theory. What can I do practically\u00a0?</strong></h3>\n<p>Our ideas about risk and effort come from our mindset. Some people realize the value of challenging themselves, they want to put in the effort to learn and grow, a great example of this is <strong>The Buffett Formula.</strong> Others, however, would rather avoid the effort feeling like it doesn\u2019t\u00a0matter.</p>\n<blockquote>We often see books with titles like The Ten Secrets of the World\u2019s Most Successful People crowding the shelves of bookstores, and these books may give many useful tips. But they\u2019re usually a list of unconnected pointers, like \u201cTake more risks\u00a0!\u201d or \u201cBelieve in yourself!\u201d While you\u2019re left admiring people who can do that, it\u2019s never clear how these things fit together or how you could ever become that way. So you\u2019re inspired for a few days, but basically, the world\u2019s most successful people still have their\u00a0secrets.</blockquote>\n<blockquote>Instead, as you begin to understand the fixed and growth mindsets, you will see exactly how one thing leads to another\u200a\u2014\u200ahow a belief that your qualities are carved in stone leads to a host of thoughts and actions, and how a belief that your qualities can be cultivated leads to a host of different thoughts and actions, taking you down an entirely different road.</blockquote>\n<blockquote>[\u2026]</blockquote>\n<blockquote>Sure, people with the fixed mindset have read the books that say: Success is about being your best self, not about being better than others; failure is an opportunity, not a condemnation; effort is the key to success. But they can\u2019t put this into practice because their basic mindset\u200a\u2014\u200atheir belief in fixed traits\u200a\u2014\u200ais telling them something entirely different: that success is about being more gifted than others, that failure does measure you, and that effort is for those who can\u2019t make it on\u00a0talent.</blockquote>\n<h3><strong>So then how do I deal with failure\u00a0?</strong></h3>\n<p>In Mindset, Dweck\u00a0writes:</p>\n<blockquote>The other thing exceptional people seem to have is a special talent for converting life\u2019s setbacks into future successes. Creativity researchers concur. In a poll of 143 creativity researchers, there was wide agreement about the number one ingredient in creative achievement. And it was exactly the kind of perseverance and resilience produced by the growth\u00a0mindset.</blockquote>\n<p>In fact Dweck takes this stoic approach, writing: \u201cin the growth mindset, failure can be a painful experience. But it doesn\u2019t define you. It\u2019s a problem to be faced, dealt with, and learned\u00a0from.\u201d</p>\n<p>We can still learn from our mistakes. The legendary basketball coach John Wooden says that you\u2019re not a failure until you start to assign blame. That\u2019s when you stop learning from your mistakes\u200a\u2014\u200ayou deny\u00a0them.</p>\n<h3>This all seems long term, is there something small that I can start doing right away\u00a0?</h3>\n<h4>The Power of\u00a0\u2026\u00a0Yet</h4>\n<p>In this TED talk, Dweck describes \u201ctwo ways to think about a problem that\u2019s slightly too hard for you to solve.\u201d Operating in this space\u200a\u2014\u200ajust outside of your comfort zone\u200a\u2014\u200ais the key to improving your performance. It\u2019s also the critical element to deliberate practice. People approach these problems with the two mindsets\u2026 \u201cAre you not smart enough to solve it\u00a0\u2026. or have you just not solved it\u00a0yet.\u201d</p>\n<p>Speaking to the cultural pressure to raise our kids for now instead of not yet, in the TED talk Dweck\u00a0says:</p>\n<blockquote>I heard about a high school in Chicago where students had to pass a certain number of courses to graduate, and if they didn\u2019t pass a course, they got the grade \u201cNot Yet.\u201d And I thought that was fantastic, because if you get a failing grade, you think, I\u2019m nothing, I\u2019m nowhere. But if you get the grade \u201cNot Yet\u201d you understand that you\u2019re on a learning curve. It gives you a path into the\u00a0future.</blockquote>\n<blockquote>\u201cNot Yet\u201d also gave me insight into a critical event early in my career, a real turning point. I wanted to see how children coped with challenge and difficulty, so I gave 10-year-olds problems that were slightly too hard for them. Some of them reacted in a shockingly positive way. They said things like, \u201cI love a challenge,\u201d or, \u201cYou know, I was hoping this would be informative.\u201d They understood that their abilities could be developed. They had what I call a growth mindset. But other students felt it was tragic, catastrophic. From their more fixed mindset perspective, their intelligence had been up for judgment and they failed. Instead of luxuriating in the power of yet, they were gripped in the tyranny of\u00a0now.</blockquote>\n<blockquote>So what do they do next? I\u2019ll tell you what they do next. In one study, they told us they would probably cheat the next time instead of studying more if they failed a test. In another study, after a failure, they looked for someone who did worse than they did so they could feel really good about themselves. And in study after study, they have run from difficulty. Scientists measured the electrical activity from the brain as students confronted an error. On the left, you see the fixed mindset students. There\u2019s hardly any activity. They run from the error. They don\u2019t engage with it. But on the right, you have the students with the growth mindset, the idea that abilities can be developed. They engage deeply. Their brain is on fire with yet. They engage deeply. They process the error. They learn from it and they correct\u00a0it.</blockquote>\n<p>It\u2019s easy to fall into the trap of now. Our kids become obsessed with getting A\u2019s\u200a\u2014\u200athey dream of the next test to prove themselves instead of dreaming big like Elon Musk. A by-product of this is that we\u2019re making them dependent on the validation that we\u2019re giving them\u200a\u2014\u200athe gamification of children.</p>\n<p>What can we do about this? Don\u2019t praise intelligence or talent, praise the work\u00a0ethic.</p>\n<blockquote>\u2026 [W]e can praise wisely, not praising intelligence or talent. That has failed. Don\u2019t do that anymore. But praising the process that kids engage in: their effort, their strategies, their focus, their perseverance, their improvement. This process praise creates kids who are hardy and resilient.</blockquote>\n<p>How we word things affects confidence, the words \u2018yet\u2019 or \u2018not yet,\u2019 \u201cgive kids greater confidence, give them a path into the future that creates greater persistence.\u201d We can change mindsets.</p>\n<blockquote>In one study, we taught them that every time they push out of their comfort zone to learn something new and difficult, the neurons in their brain can form new, stronger connections, and over time they can get smarter.\u00a0\u2026 students who were not taught this growth mindset continued to show declining grades over this difficult school transition, but those who were taught this lesson showed a sharp rebound in their grades. We have shown this now, this kind of improvement, with thousands and thousands of kids, especially struggling students</blockquote>\n<h3>The Wrap\u00a0Up</h3>\n<p>So we now know slightly better in terms of what a growth and fixed mindset is and with that knowledge in our minds nothing can stop us now. Right\u00a0? Honestly, No. You\u2019ll still experience failures and successes as all of us are owed our fair share of them. However, mindset will definitely teach you how to better deal with them for a much more happy and fulfilling life.</p>\n<p>So that\u2019s it, from my side, all the kidding apart, I would really love some feedback about the article. Furthermore, more such articles will be dropping, if interested please check those as\u00a0well.</p>\n<p>Have a great day,\u00a0Cheers!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d0d5e4e8102b\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Fixed Mindset vs Growth Mindset\u00a0: Learn how your thoughts impact your performance.</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ghhNc8gibB-4f9xg\"></figure><p>So let\u2019s Ask &amp; Answer a series of questions to understand what sort of impact a mindset makes on our lives. Can our beliefs about who we are and what we are capable of influencing how we\u00a0live?</p>\n<p>Absolutely.</p>\n<p>The way we perceive our intelligence and abilities has an impact on how we feel, but it may also have an impact on our performance, our ability to form new habits, and our ability to learn new\u00a0skills.</p>\n<p>If you have a growth mindset, you think you can improve your skills and intellect through time. If you have a fixed mindset, you will think that your IQ is fixed and that you will never be good at anything.</p>\n<h3><strong>But why should I believe you\u00a0?</strong></h3>\n<p>Exactly, you shouldn\u2019t. So here, Dr. Carol Dweck, researcher at Stanford University. In Mindset: The New Psychology of Success, Dr. Dweck\u00a0writes:</p>\n<blockquote>What are the consequences of thinking that your intelligence or personality is something you can develop, as opposed to something that is a fixed, deep-seated trait?</blockquote>\n<p>Your view of yourself can determine everything. If you believe that your qualities are unchangeable\u200a\u2014\u200athe fixed mindset\u200a\u2014\u200ayou will want to prove yourself correct over and over rather than learning from your mistakes.</p>\n<p>Dweck writes:</p>\n<blockquote>If you have only a certain amount of intelligence, a certain personality, and a certain moral character\u200a\u2014\u200awell, then you\u2019d better prove that you have a healthy dose of them. It simply wouldn\u2019t do to look or feel deficient in these most basic characteristics.</blockquote>\n<blockquote>[..]</blockquote>\n<blockquote>I\u2019ve seen so many people with this one consuming goal of proving themselves\u200a\u2014\u200ain the classroom, in their careers, and in their relationships. Every situation calls for a confirmation of their intelligence, personality, or character. Every situation is evaluated: Will I succeed or fail? Will I look smart or dumb? Will I be accepted or rejected? Will I feel like a winner or a\u00a0loser?</blockquote>\n<p>These things are culturally desirable. We value intelligence, personality, and character. It\u2019s normal to want this. But\u00a0\u2026</p>\n<blockquote>There\u2019s another mindset in which these traits are not simply a hand you\u2019re dealt and have to live with, always trying to convince yourself and others that you have a royal flush when you\u2019re secretly worried it\u2019s a pair of tens. In this mindset, the hand you\u2019re dealt is just the starting point for development. This growth mindset is based on the belief that your basic qualities are things you can cultivate through your\u00a0efforts.</blockquote>\n<p>A strong effect can result from altering our beliefs. A strong love for learning is sparked by the growth mentality. Dweck asks, \u201cWhy waste time showing how great you are when you might be getting\u00a0better?\u201d</p>\n<blockquote>Why hide deficiencies instead of overcoming them? Why look for friends or partners who will just shore up your self-esteem instead of ones who will also challenge you to grow? And why seek out the tried and true, instead of experiences that will stretch you? <strong>The passion for stretching yourself and sticking to it, even (or especially) when it\u2019s not going well, is the hallmark of the growth mindset</strong>. This is the mindset that allows people to thrive during some of the most challenging times in their\u00a0lives.</blockquote>\n<h3><strong>Okay I get it. But this is all in theory. What can I do practically\u00a0?</strong></h3>\n<p>Our ideas about risk and effort come from our mindset. Some people realize the value of challenging themselves, they want to put in the effort to learn and grow, a great example of this is <strong>The Buffett Formula.</strong> Others, however, would rather avoid the effort feeling like it doesn\u2019t\u00a0matter.</p>\n<blockquote>We often see books with titles like The Ten Secrets of the World\u2019s Most Successful People crowding the shelves of bookstores, and these books may give many useful tips. But they\u2019re usually a list of unconnected pointers, like \u201cTake more risks\u00a0!\u201d or \u201cBelieve in yourself!\u201d While you\u2019re left admiring people who can do that, it\u2019s never clear how these things fit together or how you could ever become that way. So you\u2019re inspired for a few days, but basically, the world\u2019s most successful people still have their\u00a0secrets.</blockquote>\n<blockquote>Instead, as you begin to understand the fixed and growth mindsets, you will see exactly how one thing leads to another\u200a\u2014\u200ahow a belief that your qualities are carved in stone leads to a host of thoughts and actions, and how a belief that your qualities can be cultivated leads to a host of different thoughts and actions, taking you down an entirely different road.</blockquote>\n<blockquote>[\u2026]</blockquote>\n<blockquote>Sure, people with the fixed mindset have read the books that say: Success is about being your best self, not about being better than others; failure is an opportunity, not a condemnation; effort is the key to success. But they can\u2019t put this into practice because their basic mindset\u200a\u2014\u200atheir belief in fixed traits\u200a\u2014\u200ais telling them something entirely different: that success is about being more gifted than others, that failure does measure you, and that effort is for those who can\u2019t make it on\u00a0talent.</blockquote>\n<h3><strong>So then how do I deal with failure\u00a0?</strong></h3>\n<p>In Mindset, Dweck\u00a0writes:</p>\n<blockquote>The other thing exceptional people seem to have is a special talent for converting life\u2019s setbacks into future successes. Creativity researchers concur. In a poll of 143 creativity researchers, there was wide agreement about the number one ingredient in creative achievement. And it was exactly the kind of perseverance and resilience produced by the growth\u00a0mindset.</blockquote>\n<p>In fact Dweck takes this stoic approach, writing: \u201cin the growth mindset, failure can be a painful experience. But it doesn\u2019t define you. It\u2019s a problem to be faced, dealt with, and learned\u00a0from.\u201d</p>\n<p>We can still learn from our mistakes. The legendary basketball coach John Wooden says that you\u2019re not a failure until you start to assign blame. That\u2019s when you stop learning from your mistakes\u200a\u2014\u200ayou deny\u00a0them.</p>\n<h3>This all seems long term, is there something small that I can start doing right away\u00a0?</h3>\n<h4>The Power of\u00a0\u2026\u00a0Yet</h4>\n<p>In this TED talk, Dweck describes \u201ctwo ways to think about a problem that\u2019s slightly too hard for you to solve.\u201d Operating in this space\u200a\u2014\u200ajust outside of your comfort zone\u200a\u2014\u200ais the key to improving your performance. It\u2019s also the critical element to deliberate practice. People approach these problems with the two mindsets\u2026 \u201cAre you not smart enough to solve it\u00a0\u2026. or have you just not solved it\u00a0yet.\u201d</p>\n<p>Speaking to the cultural pressure to raise our kids for now instead of not yet, in the TED talk Dweck\u00a0says:</p>\n<blockquote>I heard about a high school in Chicago where students had to pass a certain number of courses to graduate, and if they didn\u2019t pass a course, they got the grade \u201cNot Yet.\u201d And I thought that was fantastic, because if you get a failing grade, you think, I\u2019m nothing, I\u2019m nowhere. But if you get the grade \u201cNot Yet\u201d you understand that you\u2019re on a learning curve. It gives you a path into the\u00a0future.</blockquote>\n<blockquote>\u201cNot Yet\u201d also gave me insight into a critical event early in my career, a real turning point. I wanted to see how children coped with challenge and difficulty, so I gave 10-year-olds problems that were slightly too hard for them. Some of them reacted in a shockingly positive way. They said things like, \u201cI love a challenge,\u201d or, \u201cYou know, I was hoping this would be informative.\u201d They understood that their abilities could be developed. They had what I call a growth mindset. But other students felt it was tragic, catastrophic. From their more fixed mindset perspective, their intelligence had been up for judgment and they failed. Instead of luxuriating in the power of yet, they were gripped in the tyranny of\u00a0now.</blockquote>\n<blockquote>So what do they do next? I\u2019ll tell you what they do next. In one study, they told us they would probably cheat the next time instead of studying more if they failed a test. In another study, after a failure, they looked for someone who did worse than they did so they could feel really good about themselves. And in study after study, they have run from difficulty. Scientists measured the electrical activity from the brain as students confronted an error. On the left, you see the fixed mindset students. There\u2019s hardly any activity. They run from the error. They don\u2019t engage with it. But on the right, you have the students with the growth mindset, the idea that abilities can be developed. They engage deeply. Their brain is on fire with yet. They engage deeply. They process the error. They learn from it and they correct\u00a0it.</blockquote>\n<p>It\u2019s easy to fall into the trap of now. Our kids become obsessed with getting A\u2019s\u200a\u2014\u200athey dream of the next test to prove themselves instead of dreaming big like Elon Musk. A by-product of this is that we\u2019re making them dependent on the validation that we\u2019re giving them\u200a\u2014\u200athe gamification of children.</p>\n<p>What can we do about this? Don\u2019t praise intelligence or talent, praise the work\u00a0ethic.</p>\n<blockquote>\u2026 [W]e can praise wisely, not praising intelligence or talent. That has failed. Don\u2019t do that anymore. But praising the process that kids engage in: their effort, their strategies, their focus, their perseverance, their improvement. This process praise creates kids who are hardy and resilient.</blockquote>\n<p>How we word things affects confidence, the words \u2018yet\u2019 or \u2018not yet,\u2019 \u201cgive kids greater confidence, give them a path into the future that creates greater persistence.\u201d We can change mindsets.</p>\n<blockquote>In one study, we taught them that every time they push out of their comfort zone to learn something new and difficult, the neurons in their brain can form new, stronger connections, and over time they can get smarter.\u00a0\u2026 students who were not taught this growth mindset continued to show declining grades over this difficult school transition, but those who were taught this lesson showed a sharp rebound in their grades. We have shown this now, this kind of improvement, with thousands and thousands of kids, especially struggling students</blockquote>\n<h3>The Wrap\u00a0Up</h3>\n<p>So we now know slightly better in terms of what a growth and fixed mindset is and with that knowledge in our minds nothing can stop us now. Right\u00a0? Honestly, No. You\u2019ll still experience failures and successes as all of us are owed our fair share of them. However, mindset will definitely teach you how to better deal with them for a much more happy and fulfilling life.</p>\n<p>So that\u2019s it, from my side, all the kidding apart, I would really love some feedback about the article. Furthermore, more such articles will be dropping, if interested please check those as\u00a0well.</p>\n<p>Have a great day,\u00a0Cheers!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d0d5e4e8102b\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["life-lessons","lifehacks","motivation","mindset","growth"]},{"title":"Here Are the Meanings of the 12 Laws of Karma That Are at Work in Your Life","pubDate":"2022-10-11 15:30:26","link":"https://deveshsurve.medium.com/here-are-the-meanings-of-the-12-laws-of-karma-that-are-at-work-in-your-life-ca524bd526b9?source=rss-eceecdcfa17e------2","guid":"https://medium.com/p/ca524bd526b9","author":"Devesh Surve","thumbnail":"https://cdn-images-1.medium.com/max/626/0*hk0469Qln7yBwIiE","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/626/0*hk0469Qln7yBwIiE\"></figure><p>The idea of receiving back whatever you give to the universe, good or evil, is known as karma. No matter what religion you practice (or don\u2019t! ), the idea of karma may affect your daily life. By definition, Hinduism and Buddhism place a high value on predicting one\u2019s future in this world based on the moral framework of the present. You may potentially increase the chance of positive things happening in your life by following these 12 karma laws by living a good\u00a0life.</p>\n<p>So then, What are the 12 laws of\u00a0karma?</p>\n<p><strong>The Law of Cause and\u00a0Effect</strong></p>\n<p>The great law, sometimes referred to as the law of cause and effect, is what many individuals think of when they think about what karma is. It <strong>asserts that we attract either positive or evil ideas and energies in response to them</strong>. According to Jennifer Gray, a certified professional life coach, \u201c<em>it\u2019s like sowing and reaping.</em>\u201d \u201c<em>If you sow compassion and love, you will harvest those benefits</em>.\u201d</p>\n<p><strong>The Law of\u00a0Creation</strong></p>\n<p>You guessed it: creating is the main focus of the rule of creation. You have to actively get out there and make things happen; you can\u2019t just sit around and wait for nice things to suddenly materialize in your life. Gray cites Beyonc\u00e9s and Oprahs as two outstanding instances of people who live by this karmic law. She claims that they have benefited the world by using their talents, gifts, and skills. They are always coming up with new ideas, not just for their own advantage but also for the benefit of others. Therefore, <strong>you have the ability to design the reality of your\u00a0dreams</strong>.</p>\n<p><strong>The Law of\u00a0Humility</strong></p>\n<p>You must accept the way things are in order to make changes in your life. The law of humility is based on this idea. According to Gray, many extremely successful people exhibit this quality. She describes them as being powerful, caring, giving, and quite modest. But before they all embarked on their respective paths, they had to come to terms with certain aspects of themselves and of society. <strong>So keep in mind that regardless of where you begin, if you can own your narrative and the elements of it that are entirely beyond your control, you can also own the course for what comes next</strong>. You can have a prosperous, happy, and healthy\u00a0future.</p>\n<p><strong>The Law of\u00a0Growth</strong></p>\n<p>The global rule of development is about expansion, namely within ourselves, as its name implies. According to Gray, <strong>our outward world will alter and advance as a result of our interior growth, development, and evolution</strong>. This is where reading self-help and spiritual literature and engaging in personal growth may be helpful. Additionally, there is always more to learn, change, and heal as progress never\u00a0stops.</p>\n<p><strong>The Law of Responsibility</strong></p>\n<p>The rule of responsibility encourages us to accept responsibility for all of life\u2019s events, including the less desirable ones. According to Gray, \u201c<em>We are accountable for how we choose to spend our lives\u200a\u2014\u200anot anybody else</em>.\u201d <strong>We are in charge of how we present ourselves to others, how we let others treat us, and how we treat each other</strong>. By accepting responsibility for your role in each event, you may put this law into\u00a0effect.</p>\n<p><strong>The Law of Connection</strong></p>\n<p>According to the rule of connectedness, everyone and everything is interconnected. Gray claims, for instance, that despite appearing to be completely different individuals, you are the same person in the past, present, and future. Everything you\u2019ve gone through has prepared you for the subsequent event, which was followed by several more. <strong>It\u2019s all connected</strong>. We are linked to other people as well. According to Gray, \u201c<em>We help, teach, love, honor, and respect ourselves by doing the same for others.\u201d \u201cThere is always a link. All we need to do is pay attention and be aware of\u00a0it</em>.</p>\n<p><strong>The Law of\u00a0Force</strong></p>\n<p>Even though some of us may think we are expert multitaskers, our propensity to accomplish everything at once sometimes causes us to become inefficient. You cannot focus your attention on two things at once, according to the rule of force. According to Gray, you can do a lot more and get better outcomes if you <strong>concentrate on one item at a\u00a0time</strong>.</p>\n<p><strong>The Law of Generosity and Hospitality</strong></p>\n<p>This rule of karma is all about putting others before yourself, being charitable, and living up to your words. <strong>It\u2019s important to make sure that you don\u2019t only speak and believe positive things; rather, you really act on your convictions</strong>. Let\u2019s imagine, for instance, that you favor charitable giving. The rule of giving and hospitality therefore mandates that, rather than only campaigning for something to happen, you really contribute when the chance to do so\u00a0arises.</p>\n<p><strong>The Law of Now and\u00a0Here</strong></p>\n<p>The law of here and <strong>now is all about being present</strong>, as you might probably predict. The majority of us, according to Gray, \u201c<em>spend our lives replaying that same old recording in our brains, obsessing about the past and what we did wrong</em>.\u201d We won\u2019t be as disengaged whether engaging with people, eating a meal, watching a movie, or just relaxing by ourselves if we live in the present and are aware of what we are doing, seeing, tasting, smelling, and experiencing. You\u2019ll sense a shift in the vibe, and the experience will be more fulfilling.</p>\n<p><strong>The Law of\u00a0Change</strong></p>\n<p>The law of change is at work if you frequently find yourself in the same circumstances (maybe you keep drawing the same kind of unfavorable spouse, for example). <strong>It\u2019s the world trying to tell you to teach yourself a lesson</strong>. According to Gray, <strong>the pattern won\u2019t stop repeating itself unless you take the lessons from the event and act in a different way to improve yourself and break the cycle</strong>. The issue is that far too many individuals think far too much and feel far too little. We must be able to link ideas and feelings in order to modify and make changes in order to change the pattern and the issue, according to\u00a0her.</p>\n<p><strong>The Law of Persistence and\u00a0Gain</strong></p>\n<p>This karmic principle basically means that \u201c<em>doing your best pays off</em>.\u201d That is, consistent effort. <strong>Even when you don\u2019t immediately see any progress made toward your big goals, it\u2019s important to show up, put in the effort, and keep going</strong>. Gray advises adhering to this karmic rule by accepting that great things take time and perseverance, keeping going, praising yourself, and relishing every small victory you experience along the\u00a0way.</p>\n<p><strong>The Law of Meaning and\u00a0Insight</strong></p>\n<p>We all have something valuable to contribute, according to the rule of importance and inspiration. Our special talents were created to be shared with the world and have a beneficial influence. <strong>No matter how little and small it may appear to be, our contribution to the world is significant</strong>. Use this karmic law as inspiration anytime you need it. But always keep in mind that you only receive back what you put\u00a0forth.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ca524bd526b9\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/626/0*hk0469Qln7yBwIiE\"></figure><p>The idea of receiving back whatever you give to the universe, good or evil, is known as karma. No matter what religion you practice (or don\u2019t! ), the idea of karma may affect your daily life. By definition, Hinduism and Buddhism place a high value on predicting one\u2019s future in this world based on the moral framework of the present. You may potentially increase the chance of positive things happening in your life by following these 12 karma laws by living a good\u00a0life.</p>\n<p>So then, What are the 12 laws of\u00a0karma?</p>\n<p><strong>The Law of Cause and\u00a0Effect</strong></p>\n<p>The great law, sometimes referred to as the law of cause and effect, is what many individuals think of when they think about what karma is. It <strong>asserts that we attract either positive or evil ideas and energies in response to them</strong>. According to Jennifer Gray, a certified professional life coach, \u201c<em>it\u2019s like sowing and reaping.</em>\u201d \u201c<em>If you sow compassion and love, you will harvest those benefits</em>.\u201d</p>\n<p><strong>The Law of\u00a0Creation</strong></p>\n<p>You guessed it: creating is the main focus of the rule of creation. You have to actively get out there and make things happen; you can\u2019t just sit around and wait for nice things to suddenly materialize in your life. Gray cites Beyonc\u00e9s and Oprahs as two outstanding instances of people who live by this karmic law. She claims that they have benefited the world by using their talents, gifts, and skills. They are always coming up with new ideas, not just for their own advantage but also for the benefit of others. Therefore, <strong>you have the ability to design the reality of your\u00a0dreams</strong>.</p>\n<p><strong>The Law of\u00a0Humility</strong></p>\n<p>You must accept the way things are in order to make changes in your life. The law of humility is based on this idea. According to Gray, many extremely successful people exhibit this quality. She describes them as being powerful, caring, giving, and quite modest. But before they all embarked on their respective paths, they had to come to terms with certain aspects of themselves and of society. <strong>So keep in mind that regardless of where you begin, if you can own your narrative and the elements of it that are entirely beyond your control, you can also own the course for what comes next</strong>. You can have a prosperous, happy, and healthy\u00a0future.</p>\n<p><strong>The Law of\u00a0Growth</strong></p>\n<p>The global rule of development is about expansion, namely within ourselves, as its name implies. According to Gray, <strong>our outward world will alter and advance as a result of our interior growth, development, and evolution</strong>. This is where reading self-help and spiritual literature and engaging in personal growth may be helpful. Additionally, there is always more to learn, change, and heal as progress never\u00a0stops.</p>\n<p><strong>The Law of Responsibility</strong></p>\n<p>The rule of responsibility encourages us to accept responsibility for all of life\u2019s events, including the less desirable ones. According to Gray, \u201c<em>We are accountable for how we choose to spend our lives\u200a\u2014\u200anot anybody else</em>.\u201d <strong>We are in charge of how we present ourselves to others, how we let others treat us, and how we treat each other</strong>. By accepting responsibility for your role in each event, you may put this law into\u00a0effect.</p>\n<p><strong>The Law of Connection</strong></p>\n<p>According to the rule of connectedness, everyone and everything is interconnected. Gray claims, for instance, that despite appearing to be completely different individuals, you are the same person in the past, present, and future. Everything you\u2019ve gone through has prepared you for the subsequent event, which was followed by several more. <strong>It\u2019s all connected</strong>. We are linked to other people as well. According to Gray, \u201c<em>We help, teach, love, honor, and respect ourselves by doing the same for others.\u201d \u201cThere is always a link. All we need to do is pay attention and be aware of\u00a0it</em>.</p>\n<p><strong>The Law of\u00a0Force</strong></p>\n<p>Even though some of us may think we are expert multitaskers, our propensity to accomplish everything at once sometimes causes us to become inefficient. You cannot focus your attention on two things at once, according to the rule of force. According to Gray, you can do a lot more and get better outcomes if you <strong>concentrate on one item at a\u00a0time</strong>.</p>\n<p><strong>The Law of Generosity and Hospitality</strong></p>\n<p>This rule of karma is all about putting others before yourself, being charitable, and living up to your words. <strong>It\u2019s important to make sure that you don\u2019t only speak and believe positive things; rather, you really act on your convictions</strong>. Let\u2019s imagine, for instance, that you favor charitable giving. The rule of giving and hospitality therefore mandates that, rather than only campaigning for something to happen, you really contribute when the chance to do so\u00a0arises.</p>\n<p><strong>The Law of Now and\u00a0Here</strong></p>\n<p>The law of here and <strong>now is all about being present</strong>, as you might probably predict. The majority of us, according to Gray, \u201c<em>spend our lives replaying that same old recording in our brains, obsessing about the past and what we did wrong</em>.\u201d We won\u2019t be as disengaged whether engaging with people, eating a meal, watching a movie, or just relaxing by ourselves if we live in the present and are aware of what we are doing, seeing, tasting, smelling, and experiencing. You\u2019ll sense a shift in the vibe, and the experience will be more fulfilling.</p>\n<p><strong>The Law of\u00a0Change</strong></p>\n<p>The law of change is at work if you frequently find yourself in the same circumstances (maybe you keep drawing the same kind of unfavorable spouse, for example). <strong>It\u2019s the world trying to tell you to teach yourself a lesson</strong>. According to Gray, <strong>the pattern won\u2019t stop repeating itself unless you take the lessons from the event and act in a different way to improve yourself and break the cycle</strong>. The issue is that far too many individuals think far too much and feel far too little. We must be able to link ideas and feelings in order to modify and make changes in order to change the pattern and the issue, according to\u00a0her.</p>\n<p><strong>The Law of Persistence and\u00a0Gain</strong></p>\n<p>This karmic principle basically means that \u201c<em>doing your best pays off</em>.\u201d That is, consistent effort. <strong>Even when you don\u2019t immediately see any progress made toward your big goals, it\u2019s important to show up, put in the effort, and keep going</strong>. Gray advises adhering to this karmic rule by accepting that great things take time and perseverance, keeping going, praising yourself, and relishing every small victory you experience along the\u00a0way.</p>\n<p><strong>The Law of Meaning and\u00a0Insight</strong></p>\n<p>We all have something valuable to contribute, according to the rule of importance and inspiration. Our special talents were created to be shared with the world and have a beneficial influence. <strong>No matter how little and small it may appear to be, our contribution to the world is significant</strong>. Use this karmic law as inspiration anytime you need it. But always keep in mind that you only receive back what you put\u00a0forth.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ca524bd526b9\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["karma","lifehacks","yoga","motivation","life-lessons"]},{"title":"Handy Guide to visualize decision trees in Python + Code","pubDate":"2022-02-17 05:10:59","link":"https://deveshsurve.medium.com/handy-guide-to-visualize-decision-trees-in-python-code-c0259e42773d?source=rss-eceecdcfa17e------2","guid":"https://medium.com/p/c0259e42773d","author":"Devesh Surve","thumbnail":"https://cdn-images-1.medium.com/max/690/1*eucTQhlYKFSFw1r4iSkS_g.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/690/1*eucTQhlYKFSFw1r4iSkS_g.png\"></figure><p>Decision tree is one of the most popular machine learning algorithms used all along, so let\u2019s get\u00a0started!</p>\n<p>Decision trees are used for both classification and regression problems, this story we talk about classification.</p>\n<p>Before we dive into it, let me ask you\u00a0this</p>\n<blockquote><strong><em>But why Decision\u00a0trees?</em></strong></blockquote>\n<p>We have a couple of other algorithms there, so why do we have to choose Decision\u00a0trees??</p>\n<p>well, there might be many reasons but I believe a few which\u00a0are</p>\n<ol>\n<li>Decision tress often mimic the human level thinking so its so simple to understand the data and make some good interpretations.</li>\n<li>Decision trees actually make you see the logic for the data to interpret(not like black box algorithms like SVM,NN,etc..)</li>\n</ol>\n<blockquote><strong><em>How to visualize them\u00a0?</em></strong></blockquote>\n<p>The one problem that we face often while visualizing decision tree is the lack of interactivity, especially when the tree size increases to over 100 nodes, and PNGs do not cut\u00a0it.</p>\n<p>Fret not, as plotly is here. Well, not directly\u00a0though.</p>\n<p>They do have\u00a0treemap</p>\n<p>Treemap charts visualize hierarchical data using nested rectangles. The input data format is the same as for Sunburst Charts and Icicle Charts: the hierarchy is defined by labels (names for px.treemap) and parents attributes.</p>\n<p>However, we can modify the same for our decisiontreeclassifier. First let me show you with a normal matplotlib, a classification for a breast cancer\u00a0dataset.</p>\n<pre>import numpy as np<br>import pandas as pd<br>import matplotlib.pyplot as plt<br>from sklearn.datasets import load_breast_cancer<br>from sklearn.tree import DecisionTreeClassifier, plot_tree<br><br>data = load_breast_cancer()<br>X, y = data['data'], data['target']<br>feature_names = data['feature_names']<br><br>model = DecisionTreeClassifier(criterion='entropy').fit(X,y)<br><br>plt.figure(figsize=(12, 4), dpi=200)<br>plot_tree(model, feature_names=feature_names, filled=True)<br>plt.show()</pre>\n<p>And you might understand the problem I am talking\u00a0about.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ti0dR6ITUHxoztBC2zI64g.png\"></figure><p>Now, let\u2019s try plotly with our modified\u00a0code.</p>\n<pre>import plotly.graph_objects as go<br><br>labels = [''] * model.tree_.node_count<br>parents = [''] * model.tree_.node_count<br>labels[0] = 'root'<br>for i, (f, t, l, r) in enumerate(zip(<br>    model.tree_.feature,<br>    model.tree_.threshold,<br>    model.tree_.children_left,<br>    model.tree_.children_right,<br>)):<br>    if l != r:<br>        labels[l] = f'{feature_names[f]} &lt;= {t:g}'<br>        labels[r] = f'{feature_names[f]} &gt; {t:g}'<br>        parents[l] = parents[r] = labels[i]<br><br>fig = go.Figure(go.Treemap(<br>    branchvalues='total',<br>    labels=labels,<br>    parents=parents,<br>    values=model.tree_.n_node_samples,<br>    textinfo='label+value+percent root',<br>    marker=dict(colors=model.tree_.impurity),<br>    customdata=list(map(str, model.tree_.value)),<br>    hovertemplate='''<br>&lt;b&gt;%{label}&lt;/b&gt;&lt;br&gt;<br>impurity: %{color}&lt;br&gt;<br>samples: %{value} (%{percentRoot:%.2f})&lt;br&gt;<br>value: %{customdata}'''<br>))<br>fig.show()</pre>\n<pre>import plotly.graph_objects as go<br><br>labels = [''] * model.tree_.node_count<br>parents = [''] * model.tree_.node_count<br>labels[0] = 'root'<br>for i, (f, t, l, r) in enumerate(zip(<br>    model.tree_.feature,<br>    model.tree_.threshold,<br>    model.tree_.children_left,<br>    model.tree_.children_right,<br>)):<br>    if l != r:<br>        labels[l] = f'{feature_names[f]} &lt;= {t:g}'<br>        labels[r] = f'{feature_names[f]} &gt; {t:g}'<br>        parents[l] = parents[r] = labels[i]<br><br>fig = go.Figure(go.Treemap(<br>    branchvalues='total',<br>    labels=labels,<br>    parents=parents,<br>    values=model.tree_.n_node_samples,<br>    textinfo='label+value+percent root',<br>    marker=dict(colors=model.tree_.impurity),<br>    customdata=list(map(str, model.tree_.value)),<br>    hovertemplate='''<br>&lt;b&gt;%{label}&lt;/b&gt;&lt;br&gt;<br>impurity: %{color}&lt;br&gt;<br>samples: %{value} (%{percentRoot:%.2f})&lt;br&gt;<br>value: %{customdata}'''<br>))<br>fig.show()</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eS1b30W3Ia2T93IkXdtKzw.png\"></figure><p>The major advantages it gives\u00a0are:</p>\n<ol>\n<li>Interactiveness, Node seems to small to read\u00a0? Click on it and it will\u00a0expand.</li>\n<li>Easily coloring\u00a0setting</li>\n<li>Constant shape and easy to download in png and HTML\u00a0format</li>\n</ol>\n<p>Some thing to keep in mind\u00a0however,</p>\n<p>Unlike plot_tree, you can't color each class, so it can be difficult to use without binary classification or regression: sweat_smile:</p>\n<h3>References</h3>\n<ul><li><a href=\"https://scikit-learn.org/stable/auto_examples/tree/plot_unveil_tree_structure.html\">https://scikit-learn.org/stable/auto_examples/tree/plot_unveil_tree_structure.html</a></li></ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c0259e42773d\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/690/1*eucTQhlYKFSFw1r4iSkS_g.png\"></figure><p>Decision tree is one of the most popular machine learning algorithms used all along, so let\u2019s get\u00a0started!</p>\n<p>Decision trees are used for both classification and regression problems, this story we talk about classification.</p>\n<p>Before we dive into it, let me ask you\u00a0this</p>\n<blockquote><strong><em>But why Decision\u00a0trees?</em></strong></blockquote>\n<p>We have a couple of other algorithms there, so why do we have to choose Decision\u00a0trees??</p>\n<p>well, there might be many reasons but I believe a few which\u00a0are</p>\n<ol>\n<li>Decision tress often mimic the human level thinking so its so simple to understand the data and make some good interpretations.</li>\n<li>Decision trees actually make you see the logic for the data to interpret(not like black box algorithms like SVM,NN,etc..)</li>\n</ol>\n<blockquote><strong><em>How to visualize them\u00a0?</em></strong></blockquote>\n<p>The one problem that we face often while visualizing decision tree is the lack of interactivity, especially when the tree size increases to over 100 nodes, and PNGs do not cut\u00a0it.</p>\n<p>Fret not, as plotly is here. Well, not directly\u00a0though.</p>\n<p>They do have\u00a0treemap</p>\n<p>Treemap charts visualize hierarchical data using nested rectangles. The input data format is the same as for Sunburst Charts and Icicle Charts: the hierarchy is defined by labels (names for px.treemap) and parents attributes.</p>\n<p>However, we can modify the same for our decisiontreeclassifier. First let me show you with a normal matplotlib, a classification for a breast cancer\u00a0dataset.</p>\n<pre>import numpy as np<br>import pandas as pd<br>import matplotlib.pyplot as plt<br>from sklearn.datasets import load_breast_cancer<br>from sklearn.tree import DecisionTreeClassifier, plot_tree<br><br>data = load_breast_cancer()<br>X, y = data['data'], data['target']<br>feature_names = data['feature_names']<br><br>model = DecisionTreeClassifier(criterion='entropy').fit(X,y)<br><br>plt.figure(figsize=(12, 4), dpi=200)<br>plot_tree(model, feature_names=feature_names, filled=True)<br>plt.show()</pre>\n<p>And you might understand the problem I am talking\u00a0about.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ti0dR6ITUHxoztBC2zI64g.png\"></figure><p>Now, let\u2019s try plotly with our modified\u00a0code.</p>\n<pre>import plotly.graph_objects as go<br><br>labels = [''] * model.tree_.node_count<br>parents = [''] * model.tree_.node_count<br>labels[0] = 'root'<br>for i, (f, t, l, r) in enumerate(zip(<br>    model.tree_.feature,<br>    model.tree_.threshold,<br>    model.tree_.children_left,<br>    model.tree_.children_right,<br>)):<br>    if l != r:<br>        labels[l] = f'{feature_names[f]} &lt;= {t:g}'<br>        labels[r] = f'{feature_names[f]} &gt; {t:g}'<br>        parents[l] = parents[r] = labels[i]<br><br>fig = go.Figure(go.Treemap(<br>    branchvalues='total',<br>    labels=labels,<br>    parents=parents,<br>    values=model.tree_.n_node_samples,<br>    textinfo='label+value+percent root',<br>    marker=dict(colors=model.tree_.impurity),<br>    customdata=list(map(str, model.tree_.value)),<br>    hovertemplate='''<br>&lt;b&gt;%{label}&lt;/b&gt;&lt;br&gt;<br>impurity: %{color}&lt;br&gt;<br>samples: %{value} (%{percentRoot:%.2f})&lt;br&gt;<br>value: %{customdata}'''<br>))<br>fig.show()</pre>\n<pre>import plotly.graph_objects as go<br><br>labels = [''] * model.tree_.node_count<br>parents = [''] * model.tree_.node_count<br>labels[0] = 'root'<br>for i, (f, t, l, r) in enumerate(zip(<br>    model.tree_.feature,<br>    model.tree_.threshold,<br>    model.tree_.children_left,<br>    model.tree_.children_right,<br>)):<br>    if l != r:<br>        labels[l] = f'{feature_names[f]} &lt;= {t:g}'<br>        labels[r] = f'{feature_names[f]} &gt; {t:g}'<br>        parents[l] = parents[r] = labels[i]<br><br>fig = go.Figure(go.Treemap(<br>    branchvalues='total',<br>    labels=labels,<br>    parents=parents,<br>    values=model.tree_.n_node_samples,<br>    textinfo='label+value+percent root',<br>    marker=dict(colors=model.tree_.impurity),<br>    customdata=list(map(str, model.tree_.value)),<br>    hovertemplate='''<br>&lt;b&gt;%{label}&lt;/b&gt;&lt;br&gt;<br>impurity: %{color}&lt;br&gt;<br>samples: %{value} (%{percentRoot:%.2f})&lt;br&gt;<br>value: %{customdata}'''<br>))<br>fig.show()</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eS1b30W3Ia2T93IkXdtKzw.png\"></figure><p>The major advantages it gives\u00a0are:</p>\n<ol>\n<li>Interactiveness, Node seems to small to read\u00a0? Click on it and it will\u00a0expand.</li>\n<li>Easily coloring\u00a0setting</li>\n<li>Constant shape and easy to download in png and HTML\u00a0format</li>\n</ol>\n<p>Some thing to keep in mind\u00a0however,</p>\n<p>Unlike plot_tree, you can't color each class, so it can be difficult to use without binary classification or regression: sweat_smile:</p>\n<h3>References</h3>\n<ul><li><a href=\"https://scikit-learn.org/stable/auto_examples/tree/plot_unveil_tree_structure.html\">https://scikit-learn.org/stable/auto_examples/tree/plot_unveil_tree_structure.html</a></li></ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c0259e42773d\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["jupyter-notebook","data-science","python","machine-learning","decision-tree"]},{"title":"Explain me this: Lists in Python + Cheatsheet","pubDate":"2022-02-12 04:40:43","link":"https://deveshsurve.medium.com/explain-me-this-lists-in-python-cheatsheet-20d9702660a5?source=rss-eceecdcfa17e------2","guid":"https://medium.com/p/20d9702660a5","author":"Devesh Surve","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*vFdMOAprQOLo1QY4IoIT9Q.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vFdMOAprQOLo1QY4IoIT9Q.png\"></figure><p>Welcome to Another one of my Explains, today we\u2019ll be checking out Python lists in the form of questions and answers and at the end, we\u2019ll have a free cheat sheet for you. So without further ado, let\u2019s get\u00a0started!</p>\n<ol><li><strong><em>What are lists and why should I\u00a0care?</em></strong></li></ol>\n<p>Well, they are one of the principal data structures in python alongside dict, set and tuple and you should care as they are also the most versatile data types in python that allow us to work with multiple elements at\u00a0once.</p>\n<p><strong><em>2. Alright I\u2019m sort of interested, so where to\u00a0start?</em></strong></p>\n<p>Well, let\u2019s talk about the creation of a list, well thousands of years ago\u00a0.. never mind, look simply put a list is written by enumerating its elements between square brackets [ and ], with the elements separated by\u00a0commas.</p>\n<p>eg. friends = [\u201cfirst\u201d, \u201csecond\u201d, \u201cthird\u201d, \u201cfourth\u201d, \u201cfifth\u201d]</p>\n<p><strong><em>3. Seems easy enough, so [] and commas,\u00a0next?</em></strong></p>\n<p>Now that you know how to put stuff on the list, let\u2019s talk about taking stuff out of it. So accessing elements from a list could be done in 2 ways, either through index or\u00a0slicing.</p>\n<p><strong><em>4. Okay, what\u2019s an index and how can I use\u00a0it?</em></strong></p>\n<p>So Refer to the below figure, The indices of a list start with 0. The last element can also be accessed with the index \u22121, the second last with \u22122, and so\u00a0on.</p>\n<p>In short, positive index\u200a\u2014\u200aforward, negative index\u200a\u2014\u200abackward</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/345/1*0ilvMw11G0aEqkT_jh9EOQ.png\"></figure><p><strong><em>5. Then what\u2019s slicing useful\u00a0for?</em></strong></p>\n<p>Well, We can access a range of items in a list by using the slicing operator\u00a0:\u00a0, here\u2019s a shortlist of the\u00a0uses</p>\n<ul>\n<li>L[i] the ith element of\u00a0L</li>\n<li>L[i:j] the list of elements with indices starting at i and up to (but not including) j</li>\n<li>L[:j] the first j\u00a0elements</li>\n<li>L[i:] all the elements from the ith\u00a0onwards</li>\n<li>L[-i:] the last i elements of\u00a0L</li>\n<li>L[i:j:k] elements from the ith up to (but not including) the jth, taking only every kth\u00a0element</li>\n<li>L[::2] the elements of L with even\u00a0indices</li>\n<li>L[::-1] a reverse copy of\u00a0L</li>\n</ul>\n<p><strong><em>6. Damn this is confusing, do you have simple examples?</em></strong></p>\n<p>Of course, here you\u00a0go</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*okbBM72JTNyI9CYfBwZlYQ.png\"></figure><p><strong><em>6. Got it, so \u201c:\u201d used in a variety of ways, I know how to create and access a list in the 2 ways, Now what\u00a0?</em></strong></p>\n<p>Now we add/modify stuff in it. See, Lists are mutable, meaning their elements can be changed\u00a0.. ahem unlike others( Yes I\u2019m looking at you string and tuple\u00a0)</p>\n<p>Basically, we can do that in 4\u00a0ways</p>\n<ol>\n<li>We can use the assignment operator = to change an item or a range of\u00a0items</li>\n<li>We can add one item to a list using the append() method or add several items using the extend()\u00a0method.</li>\n<li>We can also use + operator to combine two lists. A fancy word for this, concatenation. P.S\u00a0: The * the operator repeats a list for the given number of\u00a0times</li>\n<li>Furthermore, we can insert one item at a desired location by using the method insert() or insert multiple items by squeezing it into an empty slice of a\u00a0list.</li>\n</ol>\n<p>Can\u2019t still visualize all this can you\u00a0;)? No worries, here you go with\u00a0examples</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lkUxeU491Wlmdyd4TPukhA.png\"></figure><p><strong><em>7. Alright so creating a list, accessing\u00a0, adding / modifying stuff\u00a0, now what deleting stuff\u00a0?</em></strong></p>\n<p>My my, are you catching on. Yup deleting it\u00a0is.</p>\n<p>3 ways\u00a0: pop, remove and\u00a0clear</p>\n<p>We can use remove() it to remove the given item or pop() to remove an item at the given\u00a0index.</p>\n<p>The pop() the method removes and returns the last item if the index is not provided. This helps us implement lists as stacks (first in, last out data structure)</p>\n<p>And, if we have to empty the whole list, we can use the clear()\u00a0method.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/888/1*d3UiN3jmS_GwhRP7YUHajQ.png\"></figure><p><strong><em>8. Alright any plans of ending soon, its been quite a while, what\u2019s left\u00a0?</em></strong></p>\n<p>Almost Done, Now, we come to list methods, Python\u2019s a beautiful language and they have some inbuilt methods for lists. For the pros, I\u2019ve also given you the complexity of them in terms of n, the length of the list\u00a0L.</p>\n<ul>\n<li>len(L) returns the number of elements of the list L\u00a0O(1)</li>\n<li>sorted(L) returns a sorted copy of the list L O(n log\u00a0n)</li>\n<li>L.sort() sorts L in place O(n log\u00a0n)</li>\n<li>L.count(c) the number of occurrences of c in L\u00a0O(n)</li>\n<li>c in L is the element c found in L?\u00a0O(n)</li>\n<li>L.append(c) append c to the end of L amortised O(1)</li>\n<li>L.pop() extracts and returns the last element of L amortised O(1)</li>\n</ul>\n<p>I know, I know, example time\u00a0\u2014</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*u8MQnv6T0rmsvgwgLDj2gQ.png\"></figure><p><strong><em>9. That\u2019s it\u00a0?</em></strong></p>\n<p>No Actually, far from it. We have stuff like list comprehension, and a plethora of other list methods, but this is a great start. Please read the official python docs, its super extensive and now you\u2019ll understand exactly whats happening.</p>\n<p><a href=\"https://docs.python.org/3/tutorial/datastructures.html\">5. Data Structures - Python 3.11.0 documentation</a></p>\n<p><strong><em>10. Wait what about that cheatsheet?</em></strong></p>\n<p>Oh yes, I almost forgot. Here\u2019s a github link. Stay starred as all DS files will be coming to this project within a\u00a0month.</p>\n<p><a href=\"https://github.com/deveshcode/Python_DS/blob/main/List_Basics.ipynb\">Python_DS/List_Basics.ipynb at main \u00b7 deveshcode/Python_DS</a></p>\n<p>So that's it, from my side, all the kidding apart, I would really love some feedback about the article. Furthermore, detailed articles for every DS will be dropping, if interested please check those as\u00a0well.</p>\n<p>Have a great day,\u00a0Cheers!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=20d9702660a5\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vFdMOAprQOLo1QY4IoIT9Q.png\"></figure><p>Welcome to Another one of my Explains, today we\u2019ll be checking out Python lists in the form of questions and answers and at the end, we\u2019ll have a free cheat sheet for you. So without further ado, let\u2019s get\u00a0started!</p>\n<ol><li><strong><em>What are lists and why should I\u00a0care?</em></strong></li></ol>\n<p>Well, they are one of the principal data structures in python alongside dict, set and tuple and you should care as they are also the most versatile data types in python that allow us to work with multiple elements at\u00a0once.</p>\n<p><strong><em>2. Alright I\u2019m sort of interested, so where to\u00a0start?</em></strong></p>\n<p>Well, let\u2019s talk about the creation of a list, well thousands of years ago\u00a0.. never mind, look simply put a list is written by enumerating its elements between square brackets [ and ], with the elements separated by\u00a0commas.</p>\n<p>eg. friends = [\u201cfirst\u201d, \u201csecond\u201d, \u201cthird\u201d, \u201cfourth\u201d, \u201cfifth\u201d]</p>\n<p><strong><em>3. Seems easy enough, so [] and commas,\u00a0next?</em></strong></p>\n<p>Now that you know how to put stuff on the list, let\u2019s talk about taking stuff out of it. So accessing elements from a list could be done in 2 ways, either through index or\u00a0slicing.</p>\n<p><strong><em>4. Okay, what\u2019s an index and how can I use\u00a0it?</em></strong></p>\n<p>So Refer to the below figure, The indices of a list start with 0. The last element can also be accessed with the index \u22121, the second last with \u22122, and so\u00a0on.</p>\n<p>In short, positive index\u200a\u2014\u200aforward, negative index\u200a\u2014\u200abackward</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/345/1*0ilvMw11G0aEqkT_jh9EOQ.png\"></figure><p><strong><em>5. Then what\u2019s slicing useful\u00a0for?</em></strong></p>\n<p>Well, We can access a range of items in a list by using the slicing operator\u00a0:\u00a0, here\u2019s a shortlist of the\u00a0uses</p>\n<ul>\n<li>L[i] the ith element of\u00a0L</li>\n<li>L[i:j] the list of elements with indices starting at i and up to (but not including) j</li>\n<li>L[:j] the first j\u00a0elements</li>\n<li>L[i:] all the elements from the ith\u00a0onwards</li>\n<li>L[-i:] the last i elements of\u00a0L</li>\n<li>L[i:j:k] elements from the ith up to (but not including) the jth, taking only every kth\u00a0element</li>\n<li>L[::2] the elements of L with even\u00a0indices</li>\n<li>L[::-1] a reverse copy of\u00a0L</li>\n</ul>\n<p><strong><em>6. Damn this is confusing, do you have simple examples?</em></strong></p>\n<p>Of course, here you\u00a0go</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*okbBM72JTNyI9CYfBwZlYQ.png\"></figure><p><strong><em>6. Got it, so \u201c:\u201d used in a variety of ways, I know how to create and access a list in the 2 ways, Now what\u00a0?</em></strong></p>\n<p>Now we add/modify stuff in it. See, Lists are mutable, meaning their elements can be changed\u00a0.. ahem unlike others( Yes I\u2019m looking at you string and tuple\u00a0)</p>\n<p>Basically, we can do that in 4\u00a0ways</p>\n<ol>\n<li>We can use the assignment operator = to change an item or a range of\u00a0items</li>\n<li>We can add one item to a list using the append() method or add several items using the extend()\u00a0method.</li>\n<li>We can also use + operator to combine two lists. A fancy word for this, concatenation. P.S\u00a0: The * the operator repeats a list for the given number of\u00a0times</li>\n<li>Furthermore, we can insert one item at a desired location by using the method insert() or insert multiple items by squeezing it into an empty slice of a\u00a0list.</li>\n</ol>\n<p>Can\u2019t still visualize all this can you\u00a0;)? No worries, here you go with\u00a0examples</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lkUxeU491Wlmdyd4TPukhA.png\"></figure><p><strong><em>7. Alright so creating a list, accessing\u00a0, adding / modifying stuff\u00a0, now what deleting stuff\u00a0?</em></strong></p>\n<p>My my, are you catching on. Yup deleting it\u00a0is.</p>\n<p>3 ways\u00a0: pop, remove and\u00a0clear</p>\n<p>We can use remove() it to remove the given item or pop() to remove an item at the given\u00a0index.</p>\n<p>The pop() the method removes and returns the last item if the index is not provided. This helps us implement lists as stacks (first in, last out data structure)</p>\n<p>And, if we have to empty the whole list, we can use the clear()\u00a0method.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/888/1*d3UiN3jmS_GwhRP7YUHajQ.png\"></figure><p><strong><em>8. Alright any plans of ending soon, its been quite a while, what\u2019s left\u00a0?</em></strong></p>\n<p>Almost Done, Now, we come to list methods, Python\u2019s a beautiful language and they have some inbuilt methods for lists. For the pros, I\u2019ve also given you the complexity of them in terms of n, the length of the list\u00a0L.</p>\n<ul>\n<li>len(L) returns the number of elements of the list L\u00a0O(1)</li>\n<li>sorted(L) returns a sorted copy of the list L O(n log\u00a0n)</li>\n<li>L.sort() sorts L in place O(n log\u00a0n)</li>\n<li>L.count(c) the number of occurrences of c in L\u00a0O(n)</li>\n<li>c in L is the element c found in L?\u00a0O(n)</li>\n<li>L.append(c) append c to the end of L amortised O(1)</li>\n<li>L.pop() extracts and returns the last element of L amortised O(1)</li>\n</ul>\n<p>I know, I know, example time\u00a0\u2014</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*u8MQnv6T0rmsvgwgLDj2gQ.png\"></figure><p><strong><em>9. That\u2019s it\u00a0?</em></strong></p>\n<p>No Actually, far from it. We have stuff like list comprehension, and a plethora of other list methods, but this is a great start. Please read the official python docs, its super extensive and now you\u2019ll understand exactly whats happening.</p>\n<p><a href=\"https://docs.python.org/3/tutorial/datastructures.html\">5. Data Structures - Python 3.11.0 documentation</a></p>\n<p><strong><em>10. Wait what about that cheatsheet?</em></strong></p>\n<p>Oh yes, I almost forgot. Here\u2019s a github link. Stay starred as all DS files will be coming to this project within a\u00a0month.</p>\n<p><a href=\"https://github.com/deveshcode/Python_DS/blob/main/List_Basics.ipynb\">Python_DS/List_Basics.ipynb at main \u00b7 deveshcode/Python_DS</a></p>\n<p>So that's it, from my side, all the kidding apart, I would really love some feedback about the article. Furthermore, detailed articles for every DS will be dropping, if interested please check those as\u00a0well.</p>\n<p>Have a great day,\u00a0Cheers!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=20d9702660a5\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["lists","python","algorithms","data-structures","programming"]},{"title":"Easily install Python using Pyenv on yoMacbook M1 (Apple Silicon)","pubDate":"2022-01-09 10:04:59","link":"https://deveshsurve.medium.com/easily-install-python-using-pyenv-on-yomacbook-m1-apple-silicon-ab21b3797fe1?source=rss-eceecdcfa17e------2","guid":"https://medium.com/p/ab21b3797fe1","author":"Devesh Surve","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*luqBAB2dHvMUpHMNT3q18A.png","description":"\n<h3>Easily install Python using Pyenv on your M1 Mac(Apple Silicon)</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*luqBAB2dHvMUpHMNT3q18A.png\"></figure><p>We all love the speed and snappiness of M1, and Python of course needs no introduction. However, by default, the python version it ships with is\u00a0python2.</p>\n<p>Here\u2019s how to check the same\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1QPWAUGlscWM6QjdDXo3jw.png\"></figure><p>Now, Let\u2019s install pyenv to manage multiple versions of Python. Just like any other thing in life, there are multiple ways to install pyenv on your\u00a0mac.</p>\n<p>Today we shall be taking a look at the simple method using git, all in 8 simple steps. So without further ado, let\u2019s get\u00a0started.</p>\n<p><strong>Git Method</strong></p>\n<p><strong><em>Step 1: </em></strong><em>Clone the pyenv folder to your local\u00a0home</em></p>\n<pre>$ git clone https://github.com/pyenv/pyenv.git ~/.pyenv<br>$ cd ~/.pyenv &amp;&amp; src/configure &amp;&amp; make -C src</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FoBp-BSiu6yTBdbG3RW02w.png\"></figure><p><strong><em>Step 2: </em></strong><em>Edit your zhrc file and add the following</em></p>\n<pre>$ vi ~/.zshrc</pre>\n<pre>export PYENV_ROOT=\"$HOME/.pyenv\" <br>export PATH=\"$PYENV_ROOT/bin:$PATH\" <br>eval \"$(pyenv init --path)\" <br>eval \"$(pyenv init -)\"</pre>\n<p><strong><em>Step 3: </em></strong><em>Restart your terminal. Now </em><em>pyenv should be activated and you can start to install some\u00a0Python.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cPw6G7CY5tQqBtdat5wHag.png\"></figure><p><strong><em>Step 4: </em></strong><em>Here\u2019s how your system should look right about\u00a0now</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kpG1Iq19j64FjYsgPUr6Nw.png\"></figure><p><strong><em>Step 5: </em></strong><em>Now, as per the recommendations given by </em>pyenv <em>suggests that before installing any version of Python, we need a Python build environment for Mac, so we first install Xcode Command Line\u00a0Tools</em></p>\n<pre>$ <em>xcode-select --install</em></pre>\n<p><strong><em>Step 6: </em></strong><em>Now, now we install brew dependencies which are required. Note\u00a0: This might take a\u00a0while.</em></p>\n<pre><strong>$ </strong>brew install openssl readline sqlite3 xz zlib</pre>\n<p><strong><em>Step 7: </em></strong><em>Finally we install python 3.7 on our Macos using the following command</em></p>\n<pre>$ pyenv install 3.7.10</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XlIawtIyyF8hgq5201lcXw.png\"></figure><p><strong><em>Step 8: </em></strong><em>Verfication Time\u00a0!!</em></p>\n<pre>List all Python versions managed by pyenv:</pre>\n<pre><strong>$ pyenv versions<br></strong>* system (set by /Users/squademy/.pyenv/version)<br>  3.7.10<br></pre>\n<p>Set the default python to 3.7.10, cause that's what I want when typing python on the\u00a0terminal</p>\n<pre><strong>$ pyenv global 3.7.10 $ python --version <br></strong>Python 3.7.10</pre>\n<p>Verify pyenv shims is activated on the\u00a0PATH:</p>\n<pre><strong>$ type -a python<br></strong>python is /Users/squademy/.pyenv/shims/python<br>python is /usr/bin/python<br><br><strong>$ which python<br></strong>/Users/squademy/.pyenv/shims/python</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YILSMqaafanKk31oJnf0gg.png\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ab21b3797fe1\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Easily install Python using Pyenv on your M1 Mac(Apple Silicon)</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*luqBAB2dHvMUpHMNT3q18A.png\"></figure><p>We all love the speed and snappiness of M1, and Python of course needs no introduction. However, by default, the python version it ships with is\u00a0python2.</p>\n<p>Here\u2019s how to check the same\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1QPWAUGlscWM6QjdDXo3jw.png\"></figure><p>Now, Let\u2019s install pyenv to manage multiple versions of Python. Just like any other thing in life, there are multiple ways to install pyenv on your\u00a0mac.</p>\n<p>Today we shall be taking a look at the simple method using git, all in 8 simple steps. So without further ado, let\u2019s get\u00a0started.</p>\n<p><strong>Git Method</strong></p>\n<p><strong><em>Step 1: </em></strong><em>Clone the pyenv folder to your local\u00a0home</em></p>\n<pre>$ git clone https://github.com/pyenv/pyenv.git ~/.pyenv<br>$ cd ~/.pyenv &amp;&amp; src/configure &amp;&amp; make -C src</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FoBp-BSiu6yTBdbG3RW02w.png\"></figure><p><strong><em>Step 2: </em></strong><em>Edit your zhrc file and add the following</em></p>\n<pre>$ vi ~/.zshrc</pre>\n<pre>export PYENV_ROOT=\"$HOME/.pyenv\" <br>export PATH=\"$PYENV_ROOT/bin:$PATH\" <br>eval \"$(pyenv init --path)\" <br>eval \"$(pyenv init -)\"</pre>\n<p><strong><em>Step 3: </em></strong><em>Restart your terminal. Now </em><em>pyenv should be activated and you can start to install some\u00a0Python.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cPw6G7CY5tQqBtdat5wHag.png\"></figure><p><strong><em>Step 4: </em></strong><em>Here\u2019s how your system should look right about\u00a0now</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kpG1Iq19j64FjYsgPUr6Nw.png\"></figure><p><strong><em>Step 5: </em></strong><em>Now, as per the recommendations given by </em>pyenv <em>suggests that before installing any version of Python, we need a Python build environment for Mac, so we first install Xcode Command Line\u00a0Tools</em></p>\n<pre>$ <em>xcode-select --install</em></pre>\n<p><strong><em>Step 6: </em></strong><em>Now, now we install brew dependencies which are required. Note\u00a0: This might take a\u00a0while.</em></p>\n<pre><strong>$ </strong>brew install openssl readline sqlite3 xz zlib</pre>\n<p><strong><em>Step 7: </em></strong><em>Finally we install python 3.7 on our Macos using the following command</em></p>\n<pre>$ pyenv install 3.7.10</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XlIawtIyyF8hgq5201lcXw.png\"></figure><p><strong><em>Step 8: </em></strong><em>Verfication Time\u00a0!!</em></p>\n<pre>List all Python versions managed by pyenv:</pre>\n<pre><strong>$ pyenv versions<br></strong>* system (set by /Users/squademy/.pyenv/version)<br>  3.7.10<br></pre>\n<p>Set the default python to 3.7.10, cause that's what I want when typing python on the\u00a0terminal</p>\n<pre><strong>$ pyenv global 3.7.10 $ python --version <br></strong>Python 3.7.10</pre>\n<p>Verify pyenv shims is activated on the\u00a0PATH:</p>\n<pre><strong>$ type -a python<br></strong>python is /Users/squademy/.pyenv/shims/python<br>python is /usr/bin/python<br><br><strong>$ which python<br></strong>/Users/squademy/.pyenv/shims/python</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YILSMqaafanKk31oJnf0gg.png\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ab21b3797fe1\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["python","pyenv","m1","macos","python3"]},{"title":"Should I VSCode or Pycharm","pubDate":"2021-01-23 08:01:43","link":"https://deveshsurve.medium.com/should-i-vscode-or-pycharm-24c203f48f3d?source=rss-eceecdcfa17e------2","guid":"https://medium.com/p/24c203f48f3d","author":"Devesh Surve","thumbnail":"https://cdn-images-1.medium.com/max/860/1*xv8a4t6KW_SyWfm3cM_WMg.png","description":"\n<p><strong>VSCode</strong> vs <strong>Pycharm </strong>for<strong> Python</strong>. Let\u2019s get ready to\u00a0rumble.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/860/1*xv8a4t6KW_SyWfm3cM_WMg.png\"></figure><p>Python as a programming language needs no introduction. We love it in industry and academia alike and it often tops the most wanted programming language charts. The question now arises, if I\u2019m working hardcore in Python, which IDE do I go with\u00a0? And the simple answer is, that there\u2019s no simple\u00a0answer.</p>\n<p>Well, to better understand this, we can divide this question, based on what I wanted from my IDE and say whoever wins the most points, wins it all. And bear in mind, this is what I personally as a developer want from my IDE, but I hope y\u2019all shall\u00a0concur.</p>\n<h3>1. Cost</h3>\n<p>Ah the money question, well here there\u2019s not much of a contest. Visual Studio Code is completely free and Pycharm, although does have the community edition, does have a lot of gem of a features hidden behind the paywall (like remote debugging support, advanced Django support and support for JavaScript and CSS) that make PyCharm attractive for some users. On top of that, PyCharm Professional costs a not so cheap $200 a year. <br>On the other hand, VS Code is FOSS (Free and Open-Source Software). This is a no-brainer. You can\u2019t really beat a price of\u00a0$0.</p>\n<p>Winner: Have to give this one to VS\u00a0Code</p>\n<h3>2. Performance</h3>\n<p>Next Thing, Performance. Its something we all deeply care about whether we want to or not. Admit it, don\u2019t you get just a little bit angry when click on chrome icon just lights up and nothing happens. Then after a few seconds, its actually pops up\u00a0?<br>If not, Great\u00a0! But for us remaining mortals, performance is really something we don\u2019t want to sacrifice on.<br>So, where do our competitors stand\u00a0?</p>\n<p>Well, Even when running idle, PyCharm consumes around 1 GB of memory on my machine, while VS Code remains under 300 megabytes in almost all cases. VS code consumes significant memory only when I open multiple projects with dozens of files.<br>In the performance criteria, VS Code beats PyCharm no questions asked. <br>But thats no because its better in someway, it actually because VS Code doesn\u2019t try to be a full IDE and keeps it simple as a text-editor, the memory footprint, startup-time, and overall responsiveness of VS Code is much better than PyCharm whereas PyCharm always enters the room guns\u00a0blazing.</p>\n<p>Winner: As long as you have good Desktop/Laptop go PyCharm. But for this comparison thing, yeah VS Code\u00a0wins</p>\n<h3>3. Helpfulness ( Features\u00a0)</h3>\n<p>Alright, we\u2019ll be clear. The only reason I am using an IDE and not the terminal or notepad is because its way way helpful. And there are some features we are so habitual to using that it becomes second nature to us that we always expect\u00a0it.</p>\n<p>Well, here\u2019s how our players stand on the features I expected.</p>\n<ul>\n<li>Intelligent code completion\u00a0: Both have it ( Prefer Pycharm\u00a0)</li>\n<li>Full text search, including support regexes\u00a0: Both have it ( Prefer Pycharm\u00a0)</li>\n<li>Syntax highlighting and bracket matching\u00a0: Both have it ( Equal\u00a0)</li>\n<li>Git integration\u00a0: Both have it ( Prefer VSCode\u00a0)</li>\n<li>Code formatting and autopep8 support\u00a0: Both have it ( Equal\u00a0)</li>\n<li>Code linting using pylint\u00a0: Both have it ( Equal\u00a0)</li>\n<li>Debugging and code inspection tools\u00a0: Both have it ( Pycharm Professional them all\u00a0)</li>\n<li>User defined code snippets\u00a0: Both have it ( Equal\u00a0)</li>\n<li>Themes\u00a0: Both have it ( Prefer VSCode\u00a0)</li>\n</ul>\n<p>Now after using both the IDEs for doing a ton of work, personally I did find out somethings that I loved from both the\u00a0sides.</p>\n<p><strong>Pycharm\u00a0: </strong><br>PyCharm contains advanced text search and replace features that aren\u2019t available in VS Code. One of these features is called \u201cSearch Everywhere\u201d, which searches filenames as well as content in the entire\u00a0project.</p>\n<p>VSCode struggles at times with autocomplete support whereas when using PyCharm, it works nearly perfectly in every instance. My personal experience of VSCode was that the autocomplete can at times work great and other times not. It\u2019s not just me though, people on reddit complain about the same thing: it\u2019s oddly temperamental</p>\n<p>Further, VSCode struggles to load extensions at times and I thought it may have been me, however, this seems to be a bit of a recurring theme as its been reported multiple times: here, and here, and here, and here, and here, and here, and the issue is still\u00a0present.</p>\n<p><strong>Vscode\u00a0:</strong><br>Ever have the scenario when you go git rebase upstream/branch and you are greeted by a sea of conflicts\u00a0? No\u00a0? Well, for arguments sake lets say you have. The pick and choose feature in VSCode is great for that quick pick the changes I want and remove the rest on the click of a\u00a0button.</p>\n<p>PyCharm has a lot of features that most people don\u2019t need regularly (advanced code refactoring tools), and it is slightly confusing figuring out where to find the configuration options if you haven\u2019t used it before. Configuring VS Code is much easier to wrap your head around. All you have to do is type Ctrl+Shift+P and a command palette appears where you can search for anything you\u2019d like to do, and it will appear in the\u00a0results.</p>\n<p>Winner: VS Code and PyCharm both do what I need to be done with certain pros and cons. So, Giving them both a\u00a0point.</p>\n<h3>4. Community</h3>\n<p>Both PyCharm and VSCode allow the community to create plugins to enhance their user experience. Both have full-blown IDE\u2019s and really do tick all the boxes in terms of what you need and want, although, neither are entirely perfect. Both have a strong community behind them and despite VSCode not being around for as long as PyCharm, both do have fairly mature systems in terms of technical capability.</p>\n<p>I think it ultimately comes down to you. Do you want to pay for PyCharm professional and have a more specialised experience, or, would you rather have the free VSCode experience with a little bit less specialism, but, potentially more extensibility?</p>\n<p>So what does my gut say?<br>Stick to PyCharm if you only code in Python. If not, VSCode.<br>The decision is ultimately up to you but the IDE you use can really alter your perception and experience in a coding language. I would expect advanced programmers to be using a variety of IDE\u2019s depending on the project in hand (not to mention to the number of languages coders jump between) so being flexible with your tools definitely makes life\u00a0easier.</p>\n<p>Winner\u00a0: Both get a point. The communities are\u00a0awesome.</p>\n<h3>5. Support</h3>\n<p>Visual Studio Code (or VSCode for short) is Microsofts open-source IDE. Its initial release was in 2015 and since then (according to Stack Overflow) it\u2019s become the most in-demand IDE.<br>PyCharm is a part of the JetBrains family of IDEs, and all of those IDEs provide extensibility through plugins. Currently, PyCharm has almost 3000 extensions listed on the JetBrains website.</p>\n<p>VS Code is designed to be a bare-bones editor which can be transformed into a complete IDE using extensions. The entire support for Python (including syntax highlighting, debugging and code completion) is just a single extension. VS Code has an extension for almost everything, and it is very simple for developers to build their own. All these extensions can be found in the VS Code Marketplace. That means VS Code ends up being far more extensible than\u00a0PyCharm.</p>\n<p>Winner\u00a0: VSCode all the\u00a0way</p>\n<h3>6. Conclusion</h3>\n<p>Finally, Points wise yes, its VSCode winning without\u00a0doubt.</p>\n<p>But my personal conclusion is\u00a0this.</p>\n<p>If your the type of person, that does enjoy the process of setting up an IDE, add extensions what you want and more importantly know what you want, go with VSCode. Its free, and tons of extensions and is light on the footprint.<br>On the other hand, if you want to just work on python, have a decent machine, dont want to customize a lot and just simply start your work you can easily get done, whatever you want to get done in\u00a0Pycharm.</p>\n<p>Me personally, I stick to VSCode + Jupyter for my personal projects and PyCharm for my main ones at the\u00a0office.</p>\n<p>Thanks a ton for taking out the time to read this. <br>Have a great\u00a0day,</p>\n<p>Cheers\u00a0!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=24c203f48f3d\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p><strong>VSCode</strong> vs <strong>Pycharm </strong>for<strong> Python</strong>. Let\u2019s get ready to\u00a0rumble.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/860/1*xv8a4t6KW_SyWfm3cM_WMg.png\"></figure><p>Python as a programming language needs no introduction. We love it in industry and academia alike and it often tops the most wanted programming language charts. The question now arises, if I\u2019m working hardcore in Python, which IDE do I go with\u00a0? And the simple answer is, that there\u2019s no simple\u00a0answer.</p>\n<p>Well, to better understand this, we can divide this question, based on what I wanted from my IDE and say whoever wins the most points, wins it all. And bear in mind, this is what I personally as a developer want from my IDE, but I hope y\u2019all shall\u00a0concur.</p>\n<h3>1. Cost</h3>\n<p>Ah the money question, well here there\u2019s not much of a contest. Visual Studio Code is completely free and Pycharm, although does have the community edition, does have a lot of gem of a features hidden behind the paywall (like remote debugging support, advanced Django support and support for JavaScript and CSS) that make PyCharm attractive for some users. On top of that, PyCharm Professional costs a not so cheap $200 a year. <br>On the other hand, VS Code is FOSS (Free and Open-Source Software). This is a no-brainer. You can\u2019t really beat a price of\u00a0$0.</p>\n<p>Winner: Have to give this one to VS\u00a0Code</p>\n<h3>2. Performance</h3>\n<p>Next Thing, Performance. Its something we all deeply care about whether we want to or not. Admit it, don\u2019t you get just a little bit angry when click on chrome icon just lights up and nothing happens. Then after a few seconds, its actually pops up\u00a0?<br>If not, Great\u00a0! But for us remaining mortals, performance is really something we don\u2019t want to sacrifice on.<br>So, where do our competitors stand\u00a0?</p>\n<p>Well, Even when running idle, PyCharm consumes around 1 GB of memory on my machine, while VS Code remains under 300 megabytes in almost all cases. VS code consumes significant memory only when I open multiple projects with dozens of files.<br>In the performance criteria, VS Code beats PyCharm no questions asked. <br>But thats no because its better in someway, it actually because VS Code doesn\u2019t try to be a full IDE and keeps it simple as a text-editor, the memory footprint, startup-time, and overall responsiveness of VS Code is much better than PyCharm whereas PyCharm always enters the room guns\u00a0blazing.</p>\n<p>Winner: As long as you have good Desktop/Laptop go PyCharm. But for this comparison thing, yeah VS Code\u00a0wins</p>\n<h3>3. Helpfulness ( Features\u00a0)</h3>\n<p>Alright, we\u2019ll be clear. The only reason I am using an IDE and not the terminal or notepad is because its way way helpful. And there are some features we are so habitual to using that it becomes second nature to us that we always expect\u00a0it.</p>\n<p>Well, here\u2019s how our players stand on the features I expected.</p>\n<ul>\n<li>Intelligent code completion\u00a0: Both have it ( Prefer Pycharm\u00a0)</li>\n<li>Full text search, including support regexes\u00a0: Both have it ( Prefer Pycharm\u00a0)</li>\n<li>Syntax highlighting and bracket matching\u00a0: Both have it ( Equal\u00a0)</li>\n<li>Git integration\u00a0: Both have it ( Prefer VSCode\u00a0)</li>\n<li>Code formatting and autopep8 support\u00a0: Both have it ( Equal\u00a0)</li>\n<li>Code linting using pylint\u00a0: Both have it ( Equal\u00a0)</li>\n<li>Debugging and code inspection tools\u00a0: Both have it ( Pycharm Professional them all\u00a0)</li>\n<li>User defined code snippets\u00a0: Both have it ( Equal\u00a0)</li>\n<li>Themes\u00a0: Both have it ( Prefer VSCode\u00a0)</li>\n</ul>\n<p>Now after using both the IDEs for doing a ton of work, personally I did find out somethings that I loved from both the\u00a0sides.</p>\n<p><strong>Pycharm\u00a0: </strong><br>PyCharm contains advanced text search and replace features that aren\u2019t available in VS Code. One of these features is called \u201cSearch Everywhere\u201d, which searches filenames as well as content in the entire\u00a0project.</p>\n<p>VSCode struggles at times with autocomplete support whereas when using PyCharm, it works nearly perfectly in every instance. My personal experience of VSCode was that the autocomplete can at times work great and other times not. It\u2019s not just me though, people on reddit complain about the same thing: it\u2019s oddly temperamental</p>\n<p>Further, VSCode struggles to load extensions at times and I thought it may have been me, however, this seems to be a bit of a recurring theme as its been reported multiple times: here, and here, and here, and here, and here, and here, and the issue is still\u00a0present.</p>\n<p><strong>Vscode\u00a0:</strong><br>Ever have the scenario when you go git rebase upstream/branch and you are greeted by a sea of conflicts\u00a0? No\u00a0? Well, for arguments sake lets say you have. The pick and choose feature in VSCode is great for that quick pick the changes I want and remove the rest on the click of a\u00a0button.</p>\n<p>PyCharm has a lot of features that most people don\u2019t need regularly (advanced code refactoring tools), and it is slightly confusing figuring out where to find the configuration options if you haven\u2019t used it before. Configuring VS Code is much easier to wrap your head around. All you have to do is type Ctrl+Shift+P and a command palette appears where you can search for anything you\u2019d like to do, and it will appear in the\u00a0results.</p>\n<p>Winner: VS Code and PyCharm both do what I need to be done with certain pros and cons. So, Giving them both a\u00a0point.</p>\n<h3>4. Community</h3>\n<p>Both PyCharm and VSCode allow the community to create plugins to enhance their user experience. Both have full-blown IDE\u2019s and really do tick all the boxes in terms of what you need and want, although, neither are entirely perfect. Both have a strong community behind them and despite VSCode not being around for as long as PyCharm, both do have fairly mature systems in terms of technical capability.</p>\n<p>I think it ultimately comes down to you. Do you want to pay for PyCharm professional and have a more specialised experience, or, would you rather have the free VSCode experience with a little bit less specialism, but, potentially more extensibility?</p>\n<p>So what does my gut say?<br>Stick to PyCharm if you only code in Python. If not, VSCode.<br>The decision is ultimately up to you but the IDE you use can really alter your perception and experience in a coding language. I would expect advanced programmers to be using a variety of IDE\u2019s depending on the project in hand (not to mention to the number of languages coders jump between) so being flexible with your tools definitely makes life\u00a0easier.</p>\n<p>Winner\u00a0: Both get a point. The communities are\u00a0awesome.</p>\n<h3>5. Support</h3>\n<p>Visual Studio Code (or VSCode for short) is Microsofts open-source IDE. Its initial release was in 2015 and since then (according to Stack Overflow) it\u2019s become the most in-demand IDE.<br>PyCharm is a part of the JetBrains family of IDEs, and all of those IDEs provide extensibility through plugins. Currently, PyCharm has almost 3000 extensions listed on the JetBrains website.</p>\n<p>VS Code is designed to be a bare-bones editor which can be transformed into a complete IDE using extensions. The entire support for Python (including syntax highlighting, debugging and code completion) is just a single extension. VS Code has an extension for almost everything, and it is very simple for developers to build their own. All these extensions can be found in the VS Code Marketplace. That means VS Code ends up being far more extensible than\u00a0PyCharm.</p>\n<p>Winner\u00a0: VSCode all the\u00a0way</p>\n<h3>6. Conclusion</h3>\n<p>Finally, Points wise yes, its VSCode winning without\u00a0doubt.</p>\n<p>But my personal conclusion is\u00a0this.</p>\n<p>If your the type of person, that does enjoy the process of setting up an IDE, add extensions what you want and more importantly know what you want, go with VSCode. Its free, and tons of extensions and is light on the footprint.<br>On the other hand, if you want to just work on python, have a decent machine, dont want to customize a lot and just simply start your work you can easily get done, whatever you want to get done in\u00a0Pycharm.</p>\n<p>Me personally, I stick to VSCode + Jupyter for my personal projects and PyCharm for my main ones at the\u00a0office.</p>\n<p>Thanks a ton for taking out the time to read this. <br>Have a great\u00a0day,</p>\n<p>Cheers\u00a0!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=24c203f48f3d\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["programming","python","coding","vscode","python3"]},{"title":"Explain Me This\u00a0: Machine Learning Interpretability\u00a0: An Intro","pubDate":"2020-10-17 07:23:47","link":"https://deveshsurve.medium.com/explain-me-this-machine-learning-interpretability-an-intro-6b6d8ceac58a?source=rss-eceecdcfa17e------2","guid":"https://medium.com/p/6b6d8ceac58a","author":"Devesh Surve","thumbnail":"https://cdn-images-1.medium.com/max/512/1*E_zbRWNIa8XRjcCiNCx7Fg.jpeg","description":"\n<h3>Explain Me This\u00a0: Machine Learning Interpretability\u00a0: An\u00a0Intro</h3>\n<p>Machine Learning. What more can I tell about a topic, that half the world has already written. So I\u00a0wont.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*E_zbRWNIa8XRjcCiNCx7Fg.jpeg\"></figure><p>Yes, I\u00a0am.</p>\n<p>Today, I shall be starting a new series called Explain Me This. My aim is basically to explain the Crux of a topic with Question and Examples that could be instantly tried out, clear basics and provide resources for you to figure the rest out yourself.</p>\n<p>Detailed Information and research papers are just a search away, so our aim would be to understand comparatively niche topics in simple way with examples.</p>\n<p>Enough boring you with words, lets get this rolling\u00a0!</p>\n<p>And for the first topic, we shall start\u00a0with</p>\n<h3><strong>MLI\u00a0: Machine Learning Interpretability.</strong></h3>\n<p>Now for detailed definitions and other theory, I shall be mentioning resources at the end. Initially though, we will keep it as layman as possible.</p>\n<p>In order to do that, lets start asking and answering a few Questions and hopefully by end you shall be wondering how did time pass so quickly\u00a0?</p>\n<p>Jokes apart, Lets get\u00a0started.</p>\n<blockquote>Question 1\u00a0: What is MLI\u00a0?</blockquote>\n<p>In a single line, MLI is basically trying real hard to answer, why did the Model Predict what it did using various techniques.</p>\n<p>The emphasis on <strong>trying</strong> is because, there is no straight answer. We cant say because of a single thing the result of prediction was 42. As models become more and more complex, from users perspective, we just enter an input from one end and output on other end. Fancy term for this is, <strong>Black box\u00a0models</strong></p>\n<p>MLI tries to fix this, or atleast help\u00a0out.</p>\n<blockquote>Question 2: Alright thats MLI, but why do i need this\u00a0?</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/518/1*SBXJ5y5DOCVOIreqFn1gPw.png\"></figure><p>Well, because in your local models, if a prediction is wrong all you lose is some reputation among friends and peers. But in serious ones, a biiiit more is at\u00a0stake.</p>\n<p>So 2 things start mattering,</p>\n<ol>\n<li>Why should I trust what this piece of code\u00a0says</li>\n<li>If its wrong what factors made it choose the wrong\u00a0answer</li>\n</ol>\n<p>And MLI answers these questions, and in its process, helps build Trust over the model, and helps people take better decisions. So just as your models gives correct output, it should also give an idea to the user\u00a0why.</p>\n<blockquote>Question 3: Okay maybe I\u2019m sold on it, how do I try it for my models\u00a0?</blockquote>\n<p>Well it depends, the flow, of MLI is like this, you need to check in which stage are you currently.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/518/1*m0CTg8RfiXmkPJ5uZUt3Ow.png\"></figure><p>Are you still collecting data, have you already prepped that data and its ready to be used to train the model, or you have an already trained model and you just want it to be interpreted.</p>\n<p>If you are at the step 3, ready with the model and the data, then Bingo\u00a0! You can start interpreting.</p>\n<blockquote>Question 4: That\u2019s all theory, show me code bro\u00a0!</blockquote>\n<p>I know, I know what you are thinking, that\u2019s childish, but there enough serious articles out there, at least lets have some fun\u00a0here.</p>\n<p>So as I said, there are various techniques\u00a0:</p>\n<ol>\n<li>LIME</li>\n<li>DeepLIFT</li>\n<li>SHAPLEY</li>\n<li>SKATER</li>\n<li>AIX360</li>\n<li>RULEX</li>\n</ol>\n<p>Just as an intro, I shall show you\u00a0LIME.</p>\n<p><em>PS\u00a0: Detailed articles for every technique dropping from next week, a follow wont hurt\u00a0xD</em></p>\n<p>So, Lets start with LIME and Eli5\u00a0:</p>\n<p>Here\u2019s what we shall be doing, we will take IMDb movie reviews, create a classification model that basically predicts if its a positive or a negative review. Again, fancy word for this is <strong>sentiment analysis.</strong></p>\n<p>Done Till here, a we will now have black box model which takes input from one end, output from\u00a0other.</p>\n<p>Then, we shall use the above techniques, to make the model interpretable.</p>\n<p>Understood the flow\u00a0? Lets write\u00a0!</p>\n<p>First of all, Lets read the dataset, and print it, should basically looks very simple 2 columns\u00a0:</p>\n<ol>\n<li>Review</li>\n<li>Label ( 0 is negative and 1 is positive\u00a0)</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FVDIi-0Mi78_0Hq6OUahzw.png\"></figure><p>Then we build a basic model, using CountVectorizer, I wont go into details here, but I\u2019ll share this notebook later and you can take a look at everything for yourself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*o5-x1tre0hoav9gjnFqPpg.png\"></figure><p>Finally, we import the eli5 library, pip install eli5 if not present, and write the following code.</p>\n<p>What it does basically is\u00a0:</p>\n<ol>\n<li>Create explainer object</li>\n<li>Fit the explainer model</li>\n<li>Call the requisite methods to show explainations</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8GNitqFKiPKVUDWXF3An5Q.png\"></figure><p>Here\u2019s how the output looks for a positive review such as this one\u00a0:</p>\n<p><em>Definitely worth checking\u00a0out.</em></p>\n<p>Usually all you get from the model is, 0 or 1\u00a0\u2026 Now here\u2019s what you get for\u00a0this.</p>\n<p>A colour coded sentence, individual breakdown of sentence as per importance of\u00a0words.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/917/1*mphaEyHRVcP7EiRlKd4-Bg.png\"></figure><blockquote>Question 5: Cool, so some concept, some uses, some techniques, some examples, what else now\u00a0?</blockquote>\n<p>A clap would help to be\u00a0honest.</p>\n<p>But yeah now you have to take the call. If you think this is something that interests you, that attracts you then the world is your oyster. There are tons of use cases and lots to discover.</p>\n<p>Here\u2019s a number of resources I would recommend\u00a0:</p>\n<ul>\n<li><a href=\"https://christophm.github.io/interpretable-ml-book/\">Interpretable Machine Learning</a></li>\n<li><a href=\"https://analyticsindiamag.com/8-explainable-ai-frameworks-driving-a-new-paradigm-for-transparency-in-ai/\">8 Explainable AI Frameworks Driving A New Paradigm For Transparency</a></li>\n<li><a href=\"https://towardsdatascience.com/guide-to-interpretable-machine-learning-d40e8a64b6cf\">Guide to Interpretable  Machine Learning</a></li>\n</ul>\n<p>So thats it, from my side, all the kidding apart, I would really love some feedback about the article. Furthermore, detailed articles for every technique will be dropping, if interested please check those as\u00a0well.</p>\n<p>Have a great day, Cheers\u00a0!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6b6d8ceac58a\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Explain Me This\u00a0: Machine Learning Interpretability\u00a0: An\u00a0Intro</h3>\n<p>Machine Learning. What more can I tell about a topic, that half the world has already written. So I\u00a0wont.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*E_zbRWNIa8XRjcCiNCx7Fg.jpeg\"></figure><p>Yes, I\u00a0am.</p>\n<p>Today, I shall be starting a new series called Explain Me This. My aim is basically to explain the Crux of a topic with Question and Examples that could be instantly tried out, clear basics and provide resources for you to figure the rest out yourself.</p>\n<p>Detailed Information and research papers are just a search away, so our aim would be to understand comparatively niche topics in simple way with examples.</p>\n<p>Enough boring you with words, lets get this rolling\u00a0!</p>\n<p>And for the first topic, we shall start\u00a0with</p>\n<h3><strong>MLI\u00a0: Machine Learning Interpretability.</strong></h3>\n<p>Now for detailed definitions and other theory, I shall be mentioning resources at the end. Initially though, we will keep it as layman as possible.</p>\n<p>In order to do that, lets start asking and answering a few Questions and hopefully by end you shall be wondering how did time pass so quickly\u00a0?</p>\n<p>Jokes apart, Lets get\u00a0started.</p>\n<blockquote>Question 1\u00a0: What is MLI\u00a0?</blockquote>\n<p>In a single line, MLI is basically trying real hard to answer, why did the Model Predict what it did using various techniques.</p>\n<p>The emphasis on <strong>trying</strong> is because, there is no straight answer. We cant say because of a single thing the result of prediction was 42. As models become more and more complex, from users perspective, we just enter an input from one end and output on other end. Fancy term for this is, <strong>Black box\u00a0models</strong></p>\n<p>MLI tries to fix this, or atleast help\u00a0out.</p>\n<blockquote>Question 2: Alright thats MLI, but why do i need this\u00a0?</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/518/1*SBXJ5y5DOCVOIreqFn1gPw.png\"></figure><p>Well, because in your local models, if a prediction is wrong all you lose is some reputation among friends and peers. But in serious ones, a biiiit more is at\u00a0stake.</p>\n<p>So 2 things start mattering,</p>\n<ol>\n<li>Why should I trust what this piece of code\u00a0says</li>\n<li>If its wrong what factors made it choose the wrong\u00a0answer</li>\n</ol>\n<p>And MLI answers these questions, and in its process, helps build Trust over the model, and helps people take better decisions. So just as your models gives correct output, it should also give an idea to the user\u00a0why.</p>\n<blockquote>Question 3: Okay maybe I\u2019m sold on it, how do I try it for my models\u00a0?</blockquote>\n<p>Well it depends, the flow, of MLI is like this, you need to check in which stage are you currently.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/518/1*m0CTg8RfiXmkPJ5uZUt3Ow.png\"></figure><p>Are you still collecting data, have you already prepped that data and its ready to be used to train the model, or you have an already trained model and you just want it to be interpreted.</p>\n<p>If you are at the step 3, ready with the model and the data, then Bingo\u00a0! You can start interpreting.</p>\n<blockquote>Question 4: That\u2019s all theory, show me code bro\u00a0!</blockquote>\n<p>I know, I know what you are thinking, that\u2019s childish, but there enough serious articles out there, at least lets have some fun\u00a0here.</p>\n<p>So as I said, there are various techniques\u00a0:</p>\n<ol>\n<li>LIME</li>\n<li>DeepLIFT</li>\n<li>SHAPLEY</li>\n<li>SKATER</li>\n<li>AIX360</li>\n<li>RULEX</li>\n</ol>\n<p>Just as an intro, I shall show you\u00a0LIME.</p>\n<p><em>PS\u00a0: Detailed articles for every technique dropping from next week, a follow wont hurt\u00a0xD</em></p>\n<p>So, Lets start with LIME and Eli5\u00a0:</p>\n<p>Here\u2019s what we shall be doing, we will take IMDb movie reviews, create a classification model that basically predicts if its a positive or a negative review. Again, fancy word for this is <strong>sentiment analysis.</strong></p>\n<p>Done Till here, a we will now have black box model which takes input from one end, output from\u00a0other.</p>\n<p>Then, we shall use the above techniques, to make the model interpretable.</p>\n<p>Understood the flow\u00a0? Lets write\u00a0!</p>\n<p>First of all, Lets read the dataset, and print it, should basically looks very simple 2 columns\u00a0:</p>\n<ol>\n<li>Review</li>\n<li>Label ( 0 is negative and 1 is positive\u00a0)</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FVDIi-0Mi78_0Hq6OUahzw.png\"></figure><p>Then we build a basic model, using CountVectorizer, I wont go into details here, but I\u2019ll share this notebook later and you can take a look at everything for yourself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*o5-x1tre0hoav9gjnFqPpg.png\"></figure><p>Finally, we import the eli5 library, pip install eli5 if not present, and write the following code.</p>\n<p>What it does basically is\u00a0:</p>\n<ol>\n<li>Create explainer object</li>\n<li>Fit the explainer model</li>\n<li>Call the requisite methods to show explainations</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8GNitqFKiPKVUDWXF3An5Q.png\"></figure><p>Here\u2019s how the output looks for a positive review such as this one\u00a0:</p>\n<p><em>Definitely worth checking\u00a0out.</em></p>\n<p>Usually all you get from the model is, 0 or 1\u00a0\u2026 Now here\u2019s what you get for\u00a0this.</p>\n<p>A colour coded sentence, individual breakdown of sentence as per importance of\u00a0words.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/917/1*mphaEyHRVcP7EiRlKd4-Bg.png\"></figure><blockquote>Question 5: Cool, so some concept, some uses, some techniques, some examples, what else now\u00a0?</blockquote>\n<p>A clap would help to be\u00a0honest.</p>\n<p>But yeah now you have to take the call. If you think this is something that interests you, that attracts you then the world is your oyster. There are tons of use cases and lots to discover.</p>\n<p>Here\u2019s a number of resources I would recommend\u00a0:</p>\n<ul>\n<li><a href=\"https://christophm.github.io/interpretable-ml-book/\">Interpretable Machine Learning</a></li>\n<li><a href=\"https://analyticsindiamag.com/8-explainable-ai-frameworks-driving-a-new-paradigm-for-transparency-in-ai/\">8 Explainable AI Frameworks Driving A New Paradigm For Transparency</a></li>\n<li><a href=\"https://towardsdatascience.com/guide-to-interpretable-machine-learning-d40e8a64b6cf\">Guide to Interpretable  Machine Learning</a></li>\n</ul>\n<p>So thats it, from my side, all the kidding apart, I would really love some feedback about the article. Furthermore, detailed articles for every technique will be dropping, if interested please check those as\u00a0well.</p>\n<p>Have a great day, Cheers\u00a0!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6b6d8ceac58a\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["explainable-ai","interpretability","machine-learning","machine-learning-ai","data-science"]},{"title":"Flask with Colab-Machine Learning ( Iris Classification )","pubDate":"2020-06-10 03:31:00","link":"https://deveshsurve.medium.com/flask-with-colab-machine-learning-iris-classification-1368faf7e217?source=rss-eceecdcfa17e------2","guid":"https://medium.com/p/1368faf7e217","author":"Devesh Surve","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*yik1jmKNaIq6OANz09f_yQ.png","description":"\n<p>Alright, so now the you know how to setup a flask application using google colab, let\u2019s get to some more fun stuff. In case, you have not seen the <a href=\"https://medium.com/@deveshssurve/running-flask-app-with-google-colab-c9f0c078fb53?sk=1efecee762672085fc00b7c92c1dc078\">first tutorial</a> I would definitely recommend checking it\u00a0out.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yik1jmKNaIq6OANz09f_yQ.png\"></figure><p>So let\u2019s get started\u00a0!</p>\n<p>First of all here\u2019s what we are going to do\u00a0:</p>\n<ol>\n<li>Build a Machine Learning Classification Model for Iris Data\u00a0set</li>\n<li>Integrate the Prediction Function of the Model with Flask\u00a0APIs</li>\n<li>Build basic Html CSS bootstrap front end to interact with our model and get predictions</li>\n</ol>\n<p>Let us begin by building our <strong>IRIS classification model</strong>. Now, if you don\u2019t have any prerequisite knowledge about Machine Learning, I shall be explaining the basics as we go\u00a0along.</p>\n<h3>\n<strong>Aim</strong>\u00a0:</h3>\n<p>Create a model which can classify different species of the Iris flower given certain\u00a0details.</p>\n<h3>Problem solving:</h3>\n<p>Now, here are the basic steps we perform when we are creating a Machine Learning\u00a0Model.</p>\n<ol>\n<li>Create a\u00a0dataset.</li>\n<li>Build a\u00a0model</li>\n<li>Train the\u00a0model</li>\n<li>Make predictions.</li>\n</ol>\n<h3>Iris Flower:</h3>\n<p>So we shall be classifying iris into 3 species\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/900/1*dol7Xh_c_Zc0C3LhBQ2uyg.jpeg\"></figure><h3><strong>Dataset</strong></h3>\n<p>Since we are using scikit-learn over here, we do get an in-built dataset for the iris classification problem.</p>\n<p>Here\u2019s a sample of our dataset\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2vTEJYgA9TnWPM81fBz7tw.png\"></figure><h4>We can see that we have 4 features and 3 labels over here\u00a0:</h4>\n<blockquote>\n<strong>Labels</strong>\u00a0:Iris setosa, Iris virginica and Iris versicolor<br><strong>Features\u00a0</strong>: Sepal length,Sepal width,Petal length,Petal Width in\u00a0cm</blockquote>\n<p>First we load the Iris dataset as follows\u00a0:</p>\n<pre>from  sklearn import  datasets<br>iris=datasets.load_iris()</pre>\n<p>Now, we assign the data and target to separate variables where x contains the features and y contains the\u00a0labels</p>\n<pre>x=iris.data<br>y=iris.target</pre>\n<h3>Splitting the\u00a0dataset;</h3>\n<p>Now, we split the dataset into 2 parts; Training data and Testing data. This is done in order for our model to be trained on one and then its predictions to be tested on\u00a0another.</p>\n<pre>from sklearn.model_selection import train_test_split<br>x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.5)</pre>\n<h3>Build the\u00a0model</h3>\n<pre>from sklearn import neighbors<br>classifier=neighbors.KNeighborsClassifier()</pre>\n<p>There we have the model. We are going to be using the KNeighbours Classifier Algorithm. I am using this mostly for efficiency but feel free to chose whatever you like. Keep in mind, we have created the model, however we cannot predict stuff\u00a0yet.</p>\n<p>For that we Train the\u00a0Model</p>\n<h3>Training our\u00a0Model.</h3>\n<p>We can train the model with <strong><em>fit </em></strong>function.</p>\n<pre>classifier.fit(x_train,y_train)</pre>\n<p>Now the model is ready to make predictions</p>\n<h3>Making predictions:</h3>\n<p>Predictions can be done with <strong><em>predict</em></strong><em>\u00a0</em>function</p>\n<pre>predictions=classifier.predict(x_test)</pre>\n<p>And now we find out how accurate our model was\u00a0:</p>\n<pre>from sklearn.metrics import accuracy_score<br>print(accuracy_score(y_test,predictions))</pre>\n<h3>Code for referral\u00a0:</h3>\n<pre>from  sklearn import  datasets<br>iris=datasets.load_iris()<br>x=iris.data<br>y=iris.target<br>from sklearn.model_selection import train_test_split<br>x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.5)<br>from sklearn import tree<br>from sklearn import neighbors<br>classifier=neighbors.KNeighborsClassifier()<br>predictions=classifier.predict(x_test)<br>from sklearn.metrics import accuracy_score<br>print(accuracy_score(y_test,predictions))</pre>\n<p>Now let us modify the iris code a little bit, for our futher use. We shall create a score function, wherein you pass a list of 4 values namely the Sepal length,Sepal width,Petal length,Petal Width in cm and you get the prediction.</p>\n<pre>def score(sample):<br>  import numpy as np<br>  np_sample = np.array(sample)<br>  pred = classifier.predict(np_sample.reshape(1, -1)).tolist()<br>  return ['setosa', 'versicolor', 'virginica'][pred[0]]</pre>\n<p>Your Colab notebook should be looking somewhat like\u00a0this</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/813/1*iizHvlVXyMgPTqvxihu6yg.png\"></figure><p>Cool, Now we have created our Model, trained our Model and have a function which predict the IRIS Species given 4\u00a0values.</p>\n<p><strong>Time to make our Flask App now\u00a0!</strong></p>\n<h3>Building the Flask\u00a0App</h3>\n<p>Now to those who have seen the previous article, you already know the drill. To those who haven\u2019t I\u2019ll still explain in\u00a0short.</p>\n<p>We begin by exposing our 5000 port as a\u00a0proxy</p>\n<pre>from google.colab.output import eval_js<br>print(eval_js(\"google.colab.kernel.proxyPort(5000)\"))</pre>\n<p>Then we define our Flask Application, the template path and our home page to be displayed.</p>\n<pre>from flask import Flask, render_template, request<br>app = Flask(__name__, template_folder='drive/My Drive/templates')<br><a href=\"http://twitter.com/app\">@app</a>.route(\"/\")<br>def home():<br>    return render_template('home.html')</pre>\n<pre><a href=\"http://twitter.com/app\">@app</a>.route(\"/iris\")<br>def iris():<br>    pass</pre>\n<pre>if __name__ == \"__main__\":<br>    app.run()</pre>\n<p>Now we will mount our drive if you haven\u2019t already and we shall create a folder called templates within which we shall have this home.html</p>\n<pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=\"en\" dir=\"ltr\"&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;Iris Example&lt;/title&gt;<br>    &lt;meta charset=\"utf-8\"&gt;<br>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;<br>    &lt;link rel=\"stylesheet\" href=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css</a>\"&gt;<br>    &lt;script src=\"<a href=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\">https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js</a>\"&gt;&lt;/script&gt;<br>    &lt;script src=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js</a>\"&gt;&lt;/script&gt;<br>   &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;style&gt;<br>body {<br>    text-align: center;<br>}<br>form {<br>    display: inline-block;<br>}<br>&lt;/style&gt;<br>    &lt;header&gt;<br>      &lt;div class=\"container\"&gt;<br>        &lt;h1 class=\"logo\"&gt;Iris Flask App&lt;/h1&gt;<br>        &lt;strong&gt;&lt;nav&gt;<br>          &lt;ul class=\"menu\"&gt;<br>            &lt;li&gt;&lt;a href=\"{{ url_for('iris') }}\"&gt;Iris Classification&lt;/a&gt;&lt;/li&gt;<br>          &lt;/ul&gt;<br>        &lt;/nav&gt;&lt;/strong&gt;<br>      &lt;/div&gt;<br>    &lt;/header&gt;<br><br>{% block content %}<br>{% endblock %}</pre>\n<pre>&lt;/body&gt;<br>&lt;/html&gt;</pre>\n<p>Just in case it starts getting confusing, here is how my colab notebook looked right about\u00a0now</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*u4ThYH-76ZSovmjcDBoWwg.png\"></figure><p>Now click on the generated proxy link and should be able to see something like\u00a0this</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/564/1*7U4GHPENhdD2imD963ILew.png\"></figure><p>Now on click of that link we open another html file we take in a form the 4 values that we shall be needing for the calculation.</p>\n<p>Now, alter the flask definition cell as follows\u00a0:</p>\n<pre>from flask import Flask, render_template, request<br>app = Flask(__name__, template_folder='drive/My Drive/templates')<br><a href=\"http://twitter.com/app\">@app</a>.route(\"/\")<br>def home():<br>    return render_template('home.html')</pre>\n<pre><a href=\"http://twitter.com/app\">@app</a>.route(\"/iris\")<br>def iris():<br>    return render_template('iris.html')<br><br>if __name__ == \"__main__\":<br>    app.run()</pre>\n<p>And add an iris.html file in drive &gt; My Drive &gt; templates &gt; iris.html</p>\n<p>Here\u2019s the code for iris.html</p>\n<pre>&lt;html&gt;<br>   &lt;head&gt;<br>    &lt;title&gt;Iris Example&lt;/title&gt;<br>    &lt;meta charset=\"utf-8\"&gt;<br>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;<br>    &lt;link rel=\"stylesheet\" href=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css</a>\"&gt;<br>    &lt;script src=\"<a href=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\">https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js</a>\"&gt;&lt;/script&gt;<br>    &lt;script src=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js</a>\"&gt;&lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>     {% extends \"home.html\" %}<br>      {% block content %}<br>&lt;div&gt;<br>&lt;style&gt;<br>body {<br>    text-align: center;<br>}<br>form {<br>    display: inline-block;<br>}<br>&lt;/style&gt;<br><strong>&lt;form action = \"</strong><a href=\"https://yue74mfyp1-496ff2e9c6d22116-5000-colab.googleusercontent.com/login\"><strong>https://yue74mfyp1-496ff2e9c6d22116-5000-colab.googleusercontent.com/p</strong></a><strong>redict\" class=\"form-group\" method = \"post\"&gt;</strong><br> &lt;div class=\"row\"&gt;<br>         &lt;p&gt;Enter sepal length (cm):&lt;/p&gt;<br>         &lt;p&gt;&lt;input class=\"form-control\" type = \"text\" name = \"sl\" /&gt;&lt;/p&gt;<br> &lt;/div &gt;<br> &lt;div class=\"row\"&gt;<br>         &lt;p&gt;Enter sepal width (cm):&lt;/p&gt;<br>         &lt;p&gt;&lt;input class=\"form-control\" type = \"text\" name = \"sw\" /&gt;&lt;/p&gt;<br> &lt;/div &gt;<br> &lt;div class=\"row\"&gt;<br>         &lt;p&gt;Enter petal length (cm):&lt;/p&gt;<br>         &lt;p&gt;&lt;input class=\"form-control\" type = \"text\" name = \"pl\" /&gt;&lt;/p&gt;<br> &lt;/div &gt;<br> &lt;div class=\"row\"&gt;<br>         &lt;p&gt;Enter petal width (cm):&lt;/p&gt;<br>         &lt;p&gt;&lt;input class=\"form-control\" type = \"text\" name = \"pw\" /&gt;&lt;/p&gt;<br> &lt;/div &gt;<br>         &lt;p&gt;&lt;input class=\"btn btn-primary\" type = \"submit\" value = \"submit\" /&gt;&lt;/p&gt;<br> &lt;/div&gt;<br>      &lt;/form&gt;<br>      {% endblock %}<br>   &lt;/body&gt;<br>&lt;/html&gt;</pre>\n<h4>NOTE\u00a0: Remember to edit the form action in this one and Change the url as per proxy generated by\u00a0you.</h4>\n<p>Here\u2019s how my Colab notebook looks right now for reference.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*S-1J4U6-eDTVeD9Lk0ASiQ.png\"></figure><p>Execute the cells and open the link. Click on iris application and here\u2019s what you shall\u00a0see</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/714/1*69hpRACsN89eyhGNgKmsig.png\"></figure><p>Now, we have our link we have our form. Once we press submit, we shall have our values\u00a0! The only thing that shall remain will be the prediction.</p>\n<p>Now, add another predict api to the flask\u00a0cell.</p>\n<pre>from flask import Flask, render_template, request<br>app = Flask(__name__, template_folder='drive/My Drive/templates')<br><a href=\"http://twitter.com/app\">@app</a>.route(\"/\")<br>def home():<br>    return render_template('home.html')</pre>\n<pre><a href=\"http://twitter.com/app\">@app</a>.route(\"/iris\")<br>def iris():<br>    return render_template('iris.html')</pre>\n<pre><a href=\"http://twitter.com/app\">@app</a>.route('/predict',methods = ['POST', 'GET'])<br>def predict():<br>  if request.method == 'POST':<br>      sl = request.form['sl']<br>      sw = request.form['sw']<br>      pl = request.form['pl']<br>      pw = request.form['pw']<br>      sample = [int(sl),int(sw),int(pl),int(pw)]<br>      pred = score(sample)<br>      return render_template(\"pred.html\", value=pred)<br><br>if __name__ == \"__main__\":<br>    app.run()</pre>\n<p>and pred.html to the templates folder. Here\u2019s the html\u00a0file</p>\n<pre>&lt;html&gt;<br>   &lt;head&gt;<br>    &lt;title&gt;Iris Example&lt;/title&gt;<br>    &lt;meta charset=\"utf-8\"&gt;<br>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;<br>    &lt;link rel=\"stylesheet\" href=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css</a>\"&gt;<br>    &lt;script src=\"<a href=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\">https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js</a>\"&gt;&lt;/script&gt;<br>    &lt;script src=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js</a>\"&gt;&lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>&lt;div&gt;<br>&lt;style&gt;<br>body {<br>    text-align: center;<br>}<br>form {<br>    display: inline-block;<br>}<br>&lt;/style&gt;<br>      {% extends \"home.html\" %}<br>      {% block content %}<br>      &lt;div class=\"jumbotron\"&gt;<br>      &lt;p&gt;The Prediction is as follows : {{ value }}&lt;/p&gt;<br>      &lt;/div&gt;<br>      {% endblock %}<br>   &lt;/body&gt;<br>&lt;/html&gt;</pre>\n<p>Put in the values and hit submit button to get your results\u00a0!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/577/1*lOD5jl0vGnYg5Bu7t4RXFg.png\"></figure><p>And finally, here\u2019s how our colab notebook looks like\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RkQlP0aFzohWGUZmfhLxkA.png\"></figure><p>And that\u2019s all there is\u00a0! Thanks a lot if you have read it till the end. And please suggest any tutorials you wish me to create related to flask or machine learning\u00a0.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1368faf7e217\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Alright, so now the you know how to setup a flask application using google colab, let\u2019s get to some more fun stuff. In case, you have not seen the <a href=\"https://medium.com/@deveshssurve/running-flask-app-with-google-colab-c9f0c078fb53?sk=1efecee762672085fc00b7c92c1dc078\">first tutorial</a> I would definitely recommend checking it\u00a0out.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yik1jmKNaIq6OANz09f_yQ.png\"></figure><p>So let\u2019s get started\u00a0!</p>\n<p>First of all here\u2019s what we are going to do\u00a0:</p>\n<ol>\n<li>Build a Machine Learning Classification Model for Iris Data\u00a0set</li>\n<li>Integrate the Prediction Function of the Model with Flask\u00a0APIs</li>\n<li>Build basic Html CSS bootstrap front end to interact with our model and get predictions</li>\n</ol>\n<p>Let us begin by building our <strong>IRIS classification model</strong>. Now, if you don\u2019t have any prerequisite knowledge about Machine Learning, I shall be explaining the basics as we go\u00a0along.</p>\n<h3>\n<strong>Aim</strong>\u00a0:</h3>\n<p>Create a model which can classify different species of the Iris flower given certain\u00a0details.</p>\n<h3>Problem solving:</h3>\n<p>Now, here are the basic steps we perform when we are creating a Machine Learning\u00a0Model.</p>\n<ol>\n<li>Create a\u00a0dataset.</li>\n<li>Build a\u00a0model</li>\n<li>Train the\u00a0model</li>\n<li>Make predictions.</li>\n</ol>\n<h3>Iris Flower:</h3>\n<p>So we shall be classifying iris into 3 species\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/900/1*dol7Xh_c_Zc0C3LhBQ2uyg.jpeg\"></figure><h3><strong>Dataset</strong></h3>\n<p>Since we are using scikit-learn over here, we do get an in-built dataset for the iris classification problem.</p>\n<p>Here\u2019s a sample of our dataset\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2vTEJYgA9TnWPM81fBz7tw.png\"></figure><h4>We can see that we have 4 features and 3 labels over here\u00a0:</h4>\n<blockquote>\n<strong>Labels</strong>\u00a0:Iris setosa, Iris virginica and Iris versicolor<br><strong>Features\u00a0</strong>: Sepal length,Sepal width,Petal length,Petal Width in\u00a0cm</blockquote>\n<p>First we load the Iris dataset as follows\u00a0:</p>\n<pre>from  sklearn import  datasets<br>iris=datasets.load_iris()</pre>\n<p>Now, we assign the data and target to separate variables where x contains the features and y contains the\u00a0labels</p>\n<pre>x=iris.data<br>y=iris.target</pre>\n<h3>Splitting the\u00a0dataset;</h3>\n<p>Now, we split the dataset into 2 parts; Training data and Testing data. This is done in order for our model to be trained on one and then its predictions to be tested on\u00a0another.</p>\n<pre>from sklearn.model_selection import train_test_split<br>x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.5)</pre>\n<h3>Build the\u00a0model</h3>\n<pre>from sklearn import neighbors<br>classifier=neighbors.KNeighborsClassifier()</pre>\n<p>There we have the model. We are going to be using the KNeighbours Classifier Algorithm. I am using this mostly for efficiency but feel free to chose whatever you like. Keep in mind, we have created the model, however we cannot predict stuff\u00a0yet.</p>\n<p>For that we Train the\u00a0Model</p>\n<h3>Training our\u00a0Model.</h3>\n<p>We can train the model with <strong><em>fit </em></strong>function.</p>\n<pre>classifier.fit(x_train,y_train)</pre>\n<p>Now the model is ready to make predictions</p>\n<h3>Making predictions:</h3>\n<p>Predictions can be done with <strong><em>predict</em></strong><em>\u00a0</em>function</p>\n<pre>predictions=classifier.predict(x_test)</pre>\n<p>And now we find out how accurate our model was\u00a0:</p>\n<pre>from sklearn.metrics import accuracy_score<br>print(accuracy_score(y_test,predictions))</pre>\n<h3>Code for referral\u00a0:</h3>\n<pre>from  sklearn import  datasets<br>iris=datasets.load_iris()<br>x=iris.data<br>y=iris.target<br>from sklearn.model_selection import train_test_split<br>x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.5)<br>from sklearn import tree<br>from sklearn import neighbors<br>classifier=neighbors.KNeighborsClassifier()<br>predictions=classifier.predict(x_test)<br>from sklearn.metrics import accuracy_score<br>print(accuracy_score(y_test,predictions))</pre>\n<p>Now let us modify the iris code a little bit, for our futher use. We shall create a score function, wherein you pass a list of 4 values namely the Sepal length,Sepal width,Petal length,Petal Width in cm and you get the prediction.</p>\n<pre>def score(sample):<br>  import numpy as np<br>  np_sample = np.array(sample)<br>  pred = classifier.predict(np_sample.reshape(1, -1)).tolist()<br>  return ['setosa', 'versicolor', 'virginica'][pred[0]]</pre>\n<p>Your Colab notebook should be looking somewhat like\u00a0this</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/813/1*iizHvlVXyMgPTqvxihu6yg.png\"></figure><p>Cool, Now we have created our Model, trained our Model and have a function which predict the IRIS Species given 4\u00a0values.</p>\n<p><strong>Time to make our Flask App now\u00a0!</strong></p>\n<h3>Building the Flask\u00a0App</h3>\n<p>Now to those who have seen the previous article, you already know the drill. To those who haven\u2019t I\u2019ll still explain in\u00a0short.</p>\n<p>We begin by exposing our 5000 port as a\u00a0proxy</p>\n<pre>from google.colab.output import eval_js<br>print(eval_js(\"google.colab.kernel.proxyPort(5000)\"))</pre>\n<p>Then we define our Flask Application, the template path and our home page to be displayed.</p>\n<pre>from flask import Flask, render_template, request<br>app = Flask(__name__, template_folder='drive/My Drive/templates')<br><a href=\"http://twitter.com/app\">@app</a>.route(\"/\")<br>def home():<br>    return render_template('home.html')</pre>\n<pre><a href=\"http://twitter.com/app\">@app</a>.route(\"/iris\")<br>def iris():<br>    pass</pre>\n<pre>if __name__ == \"__main__\":<br>    app.run()</pre>\n<p>Now we will mount our drive if you haven\u2019t already and we shall create a folder called templates within which we shall have this home.html</p>\n<pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=\"en\" dir=\"ltr\"&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;Iris Example&lt;/title&gt;<br>    &lt;meta charset=\"utf-8\"&gt;<br>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;<br>    &lt;link rel=\"stylesheet\" href=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css</a>\"&gt;<br>    &lt;script src=\"<a href=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\">https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js</a>\"&gt;&lt;/script&gt;<br>    &lt;script src=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js</a>\"&gt;&lt;/script&gt;<br>   &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;style&gt;<br>body {<br>    text-align: center;<br>}<br>form {<br>    display: inline-block;<br>}<br>&lt;/style&gt;<br>    &lt;header&gt;<br>      &lt;div class=\"container\"&gt;<br>        &lt;h1 class=\"logo\"&gt;Iris Flask App&lt;/h1&gt;<br>        &lt;strong&gt;&lt;nav&gt;<br>          &lt;ul class=\"menu\"&gt;<br>            &lt;li&gt;&lt;a href=\"{{ url_for('iris') }}\"&gt;Iris Classification&lt;/a&gt;&lt;/li&gt;<br>          &lt;/ul&gt;<br>        &lt;/nav&gt;&lt;/strong&gt;<br>      &lt;/div&gt;<br>    &lt;/header&gt;<br><br>{% block content %}<br>{% endblock %}</pre>\n<pre>&lt;/body&gt;<br>&lt;/html&gt;</pre>\n<p>Just in case it starts getting confusing, here is how my colab notebook looked right about\u00a0now</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*u4ThYH-76ZSovmjcDBoWwg.png\"></figure><p>Now click on the generated proxy link and should be able to see something like\u00a0this</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/564/1*7U4GHPENhdD2imD963ILew.png\"></figure><p>Now on click of that link we open another html file we take in a form the 4 values that we shall be needing for the calculation.</p>\n<p>Now, alter the flask definition cell as follows\u00a0:</p>\n<pre>from flask import Flask, render_template, request<br>app = Flask(__name__, template_folder='drive/My Drive/templates')<br><a href=\"http://twitter.com/app\">@app</a>.route(\"/\")<br>def home():<br>    return render_template('home.html')</pre>\n<pre><a href=\"http://twitter.com/app\">@app</a>.route(\"/iris\")<br>def iris():<br>    return render_template('iris.html')<br><br>if __name__ == \"__main__\":<br>    app.run()</pre>\n<p>And add an iris.html file in drive &gt; My Drive &gt; templates &gt; iris.html</p>\n<p>Here\u2019s the code for iris.html</p>\n<pre>&lt;html&gt;<br>   &lt;head&gt;<br>    &lt;title&gt;Iris Example&lt;/title&gt;<br>    &lt;meta charset=\"utf-8\"&gt;<br>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;<br>    &lt;link rel=\"stylesheet\" href=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css</a>\"&gt;<br>    &lt;script src=\"<a href=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\">https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js</a>\"&gt;&lt;/script&gt;<br>    &lt;script src=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js</a>\"&gt;&lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>     {% extends \"home.html\" %}<br>      {% block content %}<br>&lt;div&gt;<br>&lt;style&gt;<br>body {<br>    text-align: center;<br>}<br>form {<br>    display: inline-block;<br>}<br>&lt;/style&gt;<br><strong>&lt;form action = \"</strong><a href=\"https://yue74mfyp1-496ff2e9c6d22116-5000-colab.googleusercontent.com/login\"><strong>https://yue74mfyp1-496ff2e9c6d22116-5000-colab.googleusercontent.com/p</strong></a><strong>redict\" class=\"form-group\" method = \"post\"&gt;</strong><br> &lt;div class=\"row\"&gt;<br>         &lt;p&gt;Enter sepal length (cm):&lt;/p&gt;<br>         &lt;p&gt;&lt;input class=\"form-control\" type = \"text\" name = \"sl\" /&gt;&lt;/p&gt;<br> &lt;/div &gt;<br> &lt;div class=\"row\"&gt;<br>         &lt;p&gt;Enter sepal width (cm):&lt;/p&gt;<br>         &lt;p&gt;&lt;input class=\"form-control\" type = \"text\" name = \"sw\" /&gt;&lt;/p&gt;<br> &lt;/div &gt;<br> &lt;div class=\"row\"&gt;<br>         &lt;p&gt;Enter petal length (cm):&lt;/p&gt;<br>         &lt;p&gt;&lt;input class=\"form-control\" type = \"text\" name = \"pl\" /&gt;&lt;/p&gt;<br> &lt;/div &gt;<br> &lt;div class=\"row\"&gt;<br>         &lt;p&gt;Enter petal width (cm):&lt;/p&gt;<br>         &lt;p&gt;&lt;input class=\"form-control\" type = \"text\" name = \"pw\" /&gt;&lt;/p&gt;<br> &lt;/div &gt;<br>         &lt;p&gt;&lt;input class=\"btn btn-primary\" type = \"submit\" value = \"submit\" /&gt;&lt;/p&gt;<br> &lt;/div&gt;<br>      &lt;/form&gt;<br>      {% endblock %}<br>   &lt;/body&gt;<br>&lt;/html&gt;</pre>\n<h4>NOTE\u00a0: Remember to edit the form action in this one and Change the url as per proxy generated by\u00a0you.</h4>\n<p>Here\u2019s how my Colab notebook looks right now for reference.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*S-1J4U6-eDTVeD9Lk0ASiQ.png\"></figure><p>Execute the cells and open the link. Click on iris application and here\u2019s what you shall\u00a0see</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/714/1*69hpRACsN89eyhGNgKmsig.png\"></figure><p>Now, we have our link we have our form. Once we press submit, we shall have our values\u00a0! The only thing that shall remain will be the prediction.</p>\n<p>Now, add another predict api to the flask\u00a0cell.</p>\n<pre>from flask import Flask, render_template, request<br>app = Flask(__name__, template_folder='drive/My Drive/templates')<br><a href=\"http://twitter.com/app\">@app</a>.route(\"/\")<br>def home():<br>    return render_template('home.html')</pre>\n<pre><a href=\"http://twitter.com/app\">@app</a>.route(\"/iris\")<br>def iris():<br>    return render_template('iris.html')</pre>\n<pre><a href=\"http://twitter.com/app\">@app</a>.route('/predict',methods = ['POST', 'GET'])<br>def predict():<br>  if request.method == 'POST':<br>      sl = request.form['sl']<br>      sw = request.form['sw']<br>      pl = request.form['pl']<br>      pw = request.form['pw']<br>      sample = [int(sl),int(sw),int(pl),int(pw)]<br>      pred = score(sample)<br>      return render_template(\"pred.html\", value=pred)<br><br>if __name__ == \"__main__\":<br>    app.run()</pre>\n<p>and pred.html to the templates folder. Here\u2019s the html\u00a0file</p>\n<pre>&lt;html&gt;<br>   &lt;head&gt;<br>    &lt;title&gt;Iris Example&lt;/title&gt;<br>    &lt;meta charset=\"utf-8\"&gt;<br>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;<br>    &lt;link rel=\"stylesheet\" href=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css</a>\"&gt;<br>    &lt;script src=\"<a href=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\">https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js</a>\"&gt;&lt;/script&gt;<br>    &lt;script src=\"<a href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\">https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js</a>\"&gt;&lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>&lt;div&gt;<br>&lt;style&gt;<br>body {<br>    text-align: center;<br>}<br>form {<br>    display: inline-block;<br>}<br>&lt;/style&gt;<br>      {% extends \"home.html\" %}<br>      {% block content %}<br>      &lt;div class=\"jumbotron\"&gt;<br>      &lt;p&gt;The Prediction is as follows : {{ value }}&lt;/p&gt;<br>      &lt;/div&gt;<br>      {% endblock %}<br>   &lt;/body&gt;<br>&lt;/html&gt;</pre>\n<p>Put in the values and hit submit button to get your results\u00a0!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/577/1*lOD5jl0vGnYg5Bu7t4RXFg.png\"></figure><p>And finally, here\u2019s how our colab notebook looks like\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RkQlP0aFzohWGUZmfhLxkA.png\"></figure><p>And that\u2019s all there is\u00a0! Thanks a lot if you have read it till the end. And please suggest any tutorials you wish me to create related to flask or machine learning\u00a0.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1368faf7e217\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["python","flask","machine-learning","data-science","web-app-development"]},{"title":"Running Flask App with Google Colab","pubDate":"2020-06-07 06:20:06","link":"https://deveshsurve.medium.com/running-flask-app-with-google-colab-c9f0c078fb53?source=rss-eceecdcfa17e------2","guid":"https://medium.com/p/c9f0c078fb53","author":"Devesh Surve","thumbnail":"https://cdn-images-1.medium.com/max/640/1*pYBLqLl57uiXHFSWYEzOlw.png","description":"\n<p>Want to learn Flask, but do not want to set up a virtual environment, install packages and host a server\u00a0? Well, I had a similar problem. And Google Colab was the solution.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*pYBLqLl57uiXHFSWYEzOlw.png\"></figure><p>Since I couldn't find a simple tutorial to set up a flask application without installing stuff I have decided to make\u00a0one.</p>\n<p>And it\u2019s pretty simple, so let\u2019s get started\u00a0!</p>\n<p>The 2 main problems I had when creating a flask app on colab were as\u00a0follows:</p>\n<ol><li>First I could not access the localhost\u00a0: 5000 url as Google Colab provides a VM(virtual machine) as we do on our local machine when running a local web server. What we can do however, is expose it to a public\u00a0URL</li></ol>\n<pre>from google.colab.output import eval_js<br>print(eval_js(\"google.colab.kernel.proxyPort(5000)\"))</pre>\n<p>We get something like this. Now this is a proxy port url, basically means that whatever is happening in localhost:5000 is shown in this\u00a0link.</p>\n<blockquote><a href=\"https://c1qknz4fuo-496ff2e9c6d22116-5000-colab.googleusercontent.com/\">https://c1qknz4fuo-496ff2e9c6d22116-5000-colab.googleusercontent.com/</a></blockquote>\n<p>Now that we are here, let\u2019s create a simple Flask app\u00a0!</p>\n<pre>from flask import Flask</pre>\n<pre>app = Flask(__name__)</pre>\n<pre><a href=\"http://twitter.com/app\">@app</a>.route(\"/\")<br>def home():<br>    return \"Hello, World!\"<br><br>if __name__ == \"__main__\":<br>    app.run()</pre>\n<p>So this is how it should look like\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/958/1*GOUkHsTvPaDYImV38bqQVQ.png\"></figure><p>Now, click on the generated link above and you shall get this\u00a0page</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*25KQjHZRwwJc8UfCjKlzkQ.png\"></figure><p>Boom\u00a0! Here\u2019s our flask app up and running. No installs required.</p>\n<p>2. Remember the 2 problems I faced\u00a0? No\u00a0? Well here\u2019s the second one what if I wanted to use my own template. My own html file\u00a0? Couldn\u2019t find Here\u2019s how to use <strong>render_template </strong>in google\u00a0colab</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/378/1*nHcIBd4yGvX47LCmWCSEQw.png\"></figure><p>First Mount your drive by clicking on the Mount Drive option on the left files\u00a0panel.</p>\n<p>It shall ask you to sign in and you will have all your drive files accessible.</p>\n<p>Now, create a folder called templates and put your hello.html file in that\u00a0folder</p>\n<p>Here\u2019s a basic hello.html for your reference</p>\n<pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>h1 {<br>  color: blue;<br>  font-family: verdana;<br>  font-size: 300%;<br>}<br>p  {<br>  color: red;<br>  font-family: courier;<br>  font-size: 160%;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;</pre>\n<pre>&lt;h1&gt;Welcome to the Flask Tutorial !&lt;/h1&gt;<br>&lt;p&gt;Let's begin !&lt;/p&gt;</pre>\n<pre>&lt;/body&gt;<br>&lt;/html&gt;</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/379/1*dzuaenzRMdFO7HTt-57ULQ.png\"></figure><p>Now put this in your templates folder and you should something like\u00a0this</p>\n<p>drive &gt; My Drive &gt; templates &gt; hello.html</p>\n<p>Here\u2019s the <strong>most important part</strong>. Add the following parameter to your flask app definition.</p>\n<pre>from flask import Flask, <strong>render_template</strong><br>app = Flask(__name__, <strong>template_folder='drive/My Drive/templates')</strong><br><a href=\"http://twitter.com/app\">@app</a>.route(\"/\")<br>def home():<br><strong>    return render_template('hello.html')<br></strong>    <br>if __name__ == \"__main__\":<br>    app.run()</pre>\n<p>Re run the cell and open the link and now, you now get this\u00a0!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*W-E2UGWyUv56wwq6JHsRgA.png\"></figure><p>So that\u2019s how you run a flask app on google colab without installing anything along with how to use render template in\u00a0colab.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c9f0c078fb53\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Want to learn Flask, but do not want to set up a virtual environment, install packages and host a server\u00a0? Well, I had a similar problem. And Google Colab was the solution.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*pYBLqLl57uiXHFSWYEzOlw.png\"></figure><p>Since I couldn't find a simple tutorial to set up a flask application without installing stuff I have decided to make\u00a0one.</p>\n<p>And it\u2019s pretty simple, so let\u2019s get started\u00a0!</p>\n<p>The 2 main problems I had when creating a flask app on colab were as\u00a0follows:</p>\n<ol><li>First I could not access the localhost\u00a0: 5000 url as Google Colab provides a VM(virtual machine) as we do on our local machine when running a local web server. What we can do however, is expose it to a public\u00a0URL</li></ol>\n<pre>from google.colab.output import eval_js<br>print(eval_js(\"google.colab.kernel.proxyPort(5000)\"))</pre>\n<p>We get something like this. Now this is a proxy port url, basically means that whatever is happening in localhost:5000 is shown in this\u00a0link.</p>\n<blockquote><a href=\"https://c1qknz4fuo-496ff2e9c6d22116-5000-colab.googleusercontent.com/\">https://c1qknz4fuo-496ff2e9c6d22116-5000-colab.googleusercontent.com/</a></blockquote>\n<p>Now that we are here, let\u2019s create a simple Flask app\u00a0!</p>\n<pre>from flask import Flask</pre>\n<pre>app = Flask(__name__)</pre>\n<pre><a href=\"http://twitter.com/app\">@app</a>.route(\"/\")<br>def home():<br>    return \"Hello, World!\"<br><br>if __name__ == \"__main__\":<br>    app.run()</pre>\n<p>So this is how it should look like\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/958/1*GOUkHsTvPaDYImV38bqQVQ.png\"></figure><p>Now, click on the generated link above and you shall get this\u00a0page</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*25KQjHZRwwJc8UfCjKlzkQ.png\"></figure><p>Boom\u00a0! Here\u2019s our flask app up and running. No installs required.</p>\n<p>2. Remember the 2 problems I faced\u00a0? No\u00a0? Well here\u2019s the second one what if I wanted to use my own template. My own html file\u00a0? Couldn\u2019t find Here\u2019s how to use <strong>render_template </strong>in google\u00a0colab</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/378/1*nHcIBd4yGvX47LCmWCSEQw.png\"></figure><p>First Mount your drive by clicking on the Mount Drive option on the left files\u00a0panel.</p>\n<p>It shall ask you to sign in and you will have all your drive files accessible.</p>\n<p>Now, create a folder called templates and put your hello.html file in that\u00a0folder</p>\n<p>Here\u2019s a basic hello.html for your reference</p>\n<pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;style&gt;<br>h1 {<br>  color: blue;<br>  font-family: verdana;<br>  font-size: 300%;<br>}<br>p  {<br>  color: red;<br>  font-family: courier;<br>  font-size: 160%;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;</pre>\n<pre>&lt;h1&gt;Welcome to the Flask Tutorial !&lt;/h1&gt;<br>&lt;p&gt;Let's begin !&lt;/p&gt;</pre>\n<pre>&lt;/body&gt;<br>&lt;/html&gt;</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/379/1*dzuaenzRMdFO7HTt-57ULQ.png\"></figure><p>Now put this in your templates folder and you should something like\u00a0this</p>\n<p>drive &gt; My Drive &gt; templates &gt; hello.html</p>\n<p>Here\u2019s the <strong>most important part</strong>. Add the following parameter to your flask app definition.</p>\n<pre>from flask import Flask, <strong>render_template</strong><br>app = Flask(__name__, <strong>template_folder='drive/My Drive/templates')</strong><br><a href=\"http://twitter.com/app\">@app</a>.route(\"/\")<br>def home():<br><strong>    return render_template('hello.html')<br></strong>    <br>if __name__ == \"__main__\":<br>    app.run()</pre>\n<p>Re run the cell and open the link and now, you now get this\u00a0!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*W-E2UGWyUv56wwq6JHsRgA.png\"></figure><p>So that\u2019s how you run a flask app on google colab without installing anything along with how to use render template in\u00a0colab.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c9f0c078fb53\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["web-development","flask","google-colab","python","api"]}]}